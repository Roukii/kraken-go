// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	API_KeyScopes  = "API_Key.Scopes"
	API_SignScopes = "API_Sign.Scopes"
)

// Defines values for AddCloseOrdertype.
const (
	AddCloseOrdertypeLimit           AddCloseOrdertype = "limit"
	AddCloseOrdertypeStopLoss        AddCloseOrdertype = "stop-loss"
	AddCloseOrdertypeStopLossLimit   AddCloseOrdertype = "stop-loss-limit"
	AddCloseOrdertypeTakeProfit      AddCloseOrdertype = "take-profit"
	AddCloseOrdertypeTakeProfitLimit AddCloseOrdertype = "take-profit-limit"
)

// Defines values for AddStptype.
const (
	AddStptypeCancelBoth   AddStptype = "cancel-both"
	AddStptypeCancelNewest AddStptype = "cancel-newest"
	AddStptypeCancelOldest AddStptype = "cancel-oldest"
)

// Defines values for AddTimeinforce.
const (
	AddTimeinforceGTC AddTimeinforce = "GTC"
	AddTimeinforceGTD AddTimeinforce = "GTD"
	AddTimeinforceIOC AddTimeinforce = "IOC"
)

// Defines values for AddTrigger.
const (
	AddTriggerIndex AddTrigger = "index"
	AddTriggerLast  AddTrigger = "last"
)

// Defines values for AddType.
const (
	AddTypeBuy  AddType = "buy"
	AddTypeSell AddType = "sell"
)

// Defines values for AssetRewardsType.
const (
	Percentage AssetRewardsType = "percentage"
)

// Defines values for BatchaddOrdersStptype.
const (
	BatchaddOrdersStptypeCancelBoth   BatchaddOrdersStptype = "cancel_both"
	BatchaddOrdersStptypeCancelNewest BatchaddOrdersStptype = "cancel_newest"
	BatchaddOrdersStptypeCancelOldest BatchaddOrdersStptype = "cancel_oldest"
)

// Defines values for BatchaddOrdersTimeinforce.
const (
	BatchaddOrdersTimeinforceGTC BatchaddOrdersTimeinforce = "GTC"
	BatchaddOrdersTimeinforceGTD BatchaddOrdersTimeinforce = "GTD"
	BatchaddOrdersTimeinforceIOC BatchaddOrdersTimeinforce = "IOC"
)

// Defines values for BatchaddOrdersTrigger.
const (
	BatchaddOrdersTriggerIndex BatchaddOrdersTrigger = "index"
	BatchaddOrdersTriggerLast  BatchaddOrdersTrigger = "last"
)

// Defines values for ClosedDescrType.
const (
	ClosedDescrTypeBuy  ClosedDescrType = "buy"
	ClosedDescrTypeSell ClosedDescrType = "sell"
)

// Defines values for ClosedStatus.
const (
	ClosedStatusCanceled ClosedStatus = "canceled"
	ClosedStatusClosed   ClosedStatus = "closed"
	ClosedStatusExpired  ClosedStatus = "expired"
	ClosedStatusOpen     ClosedStatus = "open"
	ClosedStatusPending  ClosedStatus = "pending"
)

// Defines values for ClosedTrigger.
const (
	ClosedTriggerIndex ClosedTrigger = "index"
	ClosedTriggerLast  ClosedTrigger = "last"
)

// Defines values for DepositStatusProp.
const (
	DepositStatusPropOnhold DepositStatusProp = "onhold"
	DepositStatusPropReturn DepositStatusProp = "return"
)

// Defines values for LedgerType.
const (
	LedgerTypeAdjustment LedgerType = "adjustment"
	LedgerTypeDeposit    LedgerType = "deposit"
	LedgerTypeMargin     LedgerType = "margin"
	LedgerTypeReceive    LedgerType = "receive"
	LedgerTypeRollover   LedgerType = "rollover"
	LedgerTypeSettled    LedgerType = "settled"
	LedgerTypeSpend      LedgerType = "spend"
	LedgerTypeTrade      LedgerType = "trade"
	LedgerTypeTransfer   LedgerType = "transfer"
	LedgerTypeWithdrawal LedgerType = "withdrawal"
)

// Defines values for OrderDescrType.
const (
	Buy  OrderDescrType = "buy"
	Sell OrderDescrType = "sell"
)

// Defines values for OrderStatus.
const (
	OrderStatusCanceled OrderStatus = "canceled"
	OrderStatusClosed   OrderStatus = "closed"
	OrderStatusExpired  OrderStatus = "expired"
	OrderStatusOpen     OrderStatus = "open"
	OrderStatusPending  OrderStatus = "pending"
)

// Defines values for OrderTrigger.
const (
	OrderTriggerIndex OrderTrigger = "index"
	OrderTriggerLast  OrderTrigger = "last"
)

// Defines values for Ordertype.
const (
	OrdertypeLimit           Ordertype = "limit"
	OrdertypeMarket          Ordertype = "market"
	OrdertypeSettlePosition  Ordertype = "settle-position"
	OrdertypeStopLoss        Ordertype = "stop-loss"
	OrdertypeStopLossLimit   Ordertype = "stop-loss-limit"
	OrdertypeTakeProfit      Ordertype = "take-profit"
	OrdertypeTakeProfitLimit Ordertype = "take-profit-limit"
)

// Defines values for TransactionStatus.
const (
	TransactionStatusFailure TransactionStatus = "Failure"
	TransactionStatusInitial TransactionStatus = "Initial"
	TransactionStatusPending TransactionStatus = "Pending"
	TransactionStatusSettled TransactionStatus = "Settled"
	TransactionStatusSuccess TransactionStatus = "Success"
)

// Defines values for TransactionType.
const (
	Bonding   TransactionType = "bonding"
	Reward    TransactionType = "reward"
	Unbonding TransactionType = "unbonding"
)

// Defines values for Withdrawal3Status.
const (
	Withdrawal3StatusFailure Withdrawal3Status = "Failure"
	Withdrawal3StatusInitial Withdrawal3Status = "Initial"
	Withdrawal3StatusPending Withdrawal3Status = "Pending"
	Withdrawal3StatusSettled Withdrawal3Status = "Settled"
	Withdrawal3StatusSuccess Withdrawal3Status = "Success"
)

// Defines values for Withdrawal3StatusProp.
const (
	Withdrawal3StatusPropCancelDenied  Withdrawal3StatusProp = "cancel-denied"
	Withdrawal3StatusPropCancelPending Withdrawal3StatusProp = "cancel-pending"
	Withdrawal3StatusPropCanceled      Withdrawal3StatusProp = "canceled"
	Withdrawal3StatusPropOnhold        Withdrawal3StatusProp = "onhold"
	Withdrawal3StatusPropReturn        Withdrawal3StatusProp = "return"
)

// Defines values for AddExportFormdataBodyFormat.
const (
	CSV AddExportFormdataBodyFormat = "CSV"
	TSV AddExportFormdataBodyFormat = "TSV"
)

// Defines values for AddExportFormdataBodyReport.
const (
	AddExportFormdataBodyReportLedgers AddExportFormdataBodyReport = "ledgers"
	AddExportFormdataBodyReportTrades  AddExportFormdataBodyReport = "trades"
)

// Defines values for GetClosedOrdersFormdataBodyClosetime.
const (
	GetClosedOrdersFormdataBodyClosetimeBoth  GetClosedOrdersFormdataBodyClosetime = "both"
	GetClosedOrdersFormdataBodyClosetimeClose GetClosedOrdersFormdataBodyClosetime = "close"
	GetClosedOrdersFormdataBodyClosetimeOpen  GetClosedOrdersFormdataBodyClosetime = "open"
)

// Defines values for ExportStatusFormdataBodyReport.
const (
	ExportStatusFormdataBodyReportLedgers ExportStatusFormdataBodyReport = "ledgers"
	ExportStatusFormdataBodyReportTrades  ExportStatusFormdataBodyReport = "trades"
)

// Defines values for GetLedgersFormdataBodyType.
const (
	GetLedgersFormdataBodyTypeAll        GetLedgersFormdataBodyType = "all"
	GetLedgersFormdataBodyTypeCredit     GetLedgersFormdataBodyType = "credit"
	GetLedgersFormdataBodyTypeDeposit    GetLedgersFormdataBodyType = "deposit"
	GetLedgersFormdataBodyTypeMargin     GetLedgersFormdataBodyType = "margin"
	GetLedgersFormdataBodyTypeRollover   GetLedgersFormdataBodyType = "rollover"
	GetLedgersFormdataBodyTypeSale       GetLedgersFormdataBodyType = "sale"
	GetLedgersFormdataBodyTypeSettled    GetLedgersFormdataBodyType = "settled"
	GetLedgersFormdataBodyTypeStaking    GetLedgersFormdataBodyType = "staking"
	GetLedgersFormdataBodyTypeTrade      GetLedgersFormdataBodyType = "trade"
	GetLedgersFormdataBodyTypeTransfer   GetLedgersFormdataBodyType = "transfer"
	GetLedgersFormdataBodyTypeWithdrawal GetLedgersFormdataBodyType = "withdrawal"
)

// Defines values for GetOpenPositionsFormdataBodyConsolidation.
const (
	Market GetOpenPositionsFormdataBodyConsolidation = "market"
)

// Defines values for RemoveExportFormdataBodyType.
const (
	RemoveExportFormdataBodyTypeCancel RemoveExportFormdataBodyType = "cancel"
	RemoveExportFormdataBodyTypeDelete RemoveExportFormdataBodyType = "delete"
)

// Defines values for GetTradeHistoryFormdataBodyType.
const (
	All             GetTradeHistoryFormdataBodyType = "all"
	AnyPosition     GetTradeHistoryFormdataBodyType = "any position"
	ClosedPosition  GetTradeHistoryFormdataBodyType = "closed position"
	ClosingPosition GetTradeHistoryFormdataBodyType = "closing position"
	NoPosition      GetTradeHistoryFormdataBodyType = "no position"
)

// Defines values for WalletTransferFormdataBodyFrom.
const (
	SpotWallet WalletTransferFormdataBodyFrom = "Spot Wallet"
)

// Defines values for WalletTransferFormdataBodyTo.
const (
	FuturesWallet WalletTransferFormdataBodyTo = "Futures Wallet"
)

// Defines values for GetTradableAssetPairsParamsInfo.
const (
	GetTradableAssetPairsParamsInfoFees     GetTradableAssetPairsParamsInfo = "fees"
	GetTradableAssetPairsParamsInfoInfo     GetTradableAssetPairsParamsInfo = "info"
	GetTradableAssetPairsParamsInfoLeverage GetTradableAssetPairsParamsInfo = "leverage"
	GetTradableAssetPairsParamsInfoMargin   GetTradableAssetPairsParamsInfo = "margin"
)
const (
	GetSystemStatusOnline     GetSystemStatusResponseStatus = "online"
	GetSystemStatusMaintenance     GetSystemStatusResponseStatus = "maintenance"
	GetSystemStatusCancelOnly GetSystemStatusResponseStatus = "cancel_only"
	GetSystemStatusPostOnly   GetSystemStatusResponseStatus = "post_only"
)

// Defines values for GetOHLCDataParamsInterval.
const (
	N1     GetOHLCDataParamsInterval = 1
	N10080 GetOHLCDataParamsInterval = 10080
	N1440  GetOHLCDataParamsInterval = 1440
	N15    GetOHLCDataParamsInterval = 15
	N21600 GetOHLCDataParamsInterval = 21600
	N240   GetOHLCDataParamsInterval = 240
	N30    GetOHLCDataParamsInterval = 30
	N5     GetOHLCDataParamsInterval = 5
	N60    GetOHLCDataParamsInterval = 60
)

// Add defines model for add.
type Add struct {
	// CloseOrdertype Conditional close order type
	// > Note: [Conditional close orders](https://support.kraken.com/hc/en-us/articles/360038640052-Conditional-Close) are triggered by execution of the primary order in the same quantity and opposite direction, but once triggered are __independent orders__ that may reduce or increase net position
	CloseOrdertype *AddCloseOrdertype `json:"close[ordertype],omitempty"`

	// ClosePrice2 Conditional close order `price2`
	ClosePrice2 *string `json:"close[price2],omitempty"`

	// ClosePrice Conditional close order `price`
	ClosePrice *string `json:"close[price],omitempty"`

	// Deadline RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing: min now() + 2 seconds, max now() + 60 seconds.
	Deadline *string `json:"deadline,omitempty"`

	// Displayvol Order quantity in terms of the base asset. This is used to create an iceberg order, with display_volume as visible quantity, hiding rest of the order. This can only be used with `limit` order type.
	Displayvol *string `json:"displayvol,omitempty"`

	// Expiretm Expiration time
	//   * `0` no expiration (default)
	//   * `+<n>` = expire <n> seconds from now, minimum 5 seconds
	//   * `<n>` = unix timestamp of expiration time
	Expiretm *string `json:"expiretm,omitempty"`

	// Leverage "Amount of leverage desired (default: none)"
	Leverage *string `json:"leverage,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Oflags Comma delimited list of order flags
	//
	//   * `post` post-only order (available when ordertype = limit)
	//   * `fcib` prefer fee in base currency (default if selling)
	//   * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
	//   * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
	//   * `viqc`  order volume expressed in quote currency. This is supported only for market orders.
	Oflags *Oflags `json:"oflags,omitempty"`

	// Ordertype Order type
	Ordertype Ordertype `json:"ordertype"`

	// Pair Asset pair `id` or `altname`
	Pair string `json:"pair"`

	// Price Price:
	//
	// * Limit price for `limit` orders
	// * Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
	Price *string `json:"price,omitempty"`

	// Price2 Secondary Price:
	//
	// * Limit price for `stop-loss-limit` and `take-profit-limit` orders
	//
	// >  Note: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Relative prices can be suffixed with a `%` to signify the relative amount as a percentage.
	Price2 *string `json:"price2,omitempty"`

	// Starttm Scheduled start time, can be specified as an absolute timestamp or as a number of seconds in the future:
	//   * `0` now (default)
	//   * `+<n>` schedule start time <n> seconds from now
	//   * `<n>` = unix timestamp of start time
	Starttm *string `json:"starttm,omitempty"`

	// Stptype Self trade prevention behavior definition:
	// * cancel-newest - if self trade is triggered, arriving order will be canceled
	// * cancel-oldest - if self trade is triggered, resting order will be canceled
	// * cancel-both - if self trade is triggered, both arriving and resting orders will be canceled
	Stptype *AddStptype `json:"stptype,omitempty"`

	// Timeinforce Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.
	Timeinforce *AddTimeinforce `json:"timeinforce,omitempty"`

	// Trigger Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
	// >  Note: This `trigger` type will as well be used for associated conditional close orders.
	Trigger *AddTrigger `json:"trigger,omitempty"`

	// Type Order direction (buy/sell)
	Type AddType `json:"type"`

	// Userref User reference id
	//
	// `userref` is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a `userref` corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using `userref` instead of our `txid`, where supported.
	Userref *int32 `json:"userref,omitempty"`

	// Validate Validate inputs only. Do not submit order.
	Validate *bool `json:"validate,omitempty"`

	// Volume Order quantity in terms of the base asset
	// > Note: Volume can be specified as `0` for closing margin orders to automatically fill the requisite quantity.
	Volume string `json:"volume"`
}

// AddCloseOrdertype Conditional close order type
// > Note: [Conditional close orders](https://support.kraken.com/hc/en-us/articles/360038640052-Conditional-Close) are triggered by execution of the primary order in the same quantity and opposite direction, but once triggered are __independent orders__ that may reduce or increase net position
type AddCloseOrdertype string

// AddStptype Self trade prevention behavior definition:
// * cancel-newest - if self trade is triggered, arriving order will be canceled
// * cancel-oldest - if self trade is triggered, resting order will be canceled
// * cancel-both - if self trade is triggered, both arriving and resting orders will be canceled
type AddStptype string

// AddTimeinforce Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.
type AddTimeinforce string

// AddTrigger Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
// >  Note: This `trigger` type will as well be used for associated conditional close orders.
type AddTrigger string

// AddType Order direction (buy/sell)
type AddType string

// Add2 defines model for add-2.
type Add2 struct {
	Error  *Error `json:"error,omitempty"`
	Result *struct {
		// Descr Order description info
		Descr *struct {
			// Close Conditional close order description, if applicable
			Close *string `json:"close,omitempty"`

			// Order Order description
			Order *string `json:"order,omitempty"`
		} `json:"descr,omitempty"`

		// Txid Transaction IDs for order
		// <br><sup><sub>(if order was added successfully)</sup></sub>
		Txid *[]string `json:"txid,omitempty"`
	} `json:"result,omitempty"`
}

// Address Deposit Address
type Address struct {
	// Address Deposit Address
	Address *string `json:"address,omitempty"`

	// Expiretm Expiration time in unix timestamp, or 0 if not expiring
	Expiretm *string `json:"expiretm,omitempty"`

	// New Whether or not address has ever been used
	New *bool `json:"new,omitempty"`
}

// Addresses defines model for addresses.
type Addresses struct {
	// Asset Asset being deposited
	Asset string `json:"asset"`

	// Method Name of the deposit method
	Method string `json:"method"`

	// New Whether or not to generate a new address
	New *bool `json:"new,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Addresses2 defines model for addresses-2.
type Addresses2 struct {
	Error  *Error     `json:"error,omitempty"`
	Result *[]Address `json:"result,omitempty"`
}

// testAsset defines model for asset.
type testAsset struct {
	// Asset Asset code/name
	Asset string `json:"asset"`

	// CanStake Whether the user will be able to stake this asset.
	CanStake *bool `json:"can_stake,omitempty"`

	// CanUnstake Whether the user will be able to unstake this asset.
	CanUnstake     *bool `json:"can_unstake,omitempty"`
	Disabled       *bool `json:"disabled,omitempty"`
	EnabledForUser *bool `json:"enabled_for_user,omitempty"`

	// Lock Describes the locking periods and percentages for staking/unstaking operations.
	Lock *struct {
		Lockup    *[]Lock `json:"lockup,omitempty"`
		Staking   *[]Lock `json:"staking,omitempty"`
		Unstaking *[]Lock `json:"unstaking,omitempty"`
	} `json:"lock,omitempty"`

	// Method Unique ID of the staking option (used in Stake/Unstake operations)
	Method *string `json:"method,omitempty"`

	// MinimumAmount Minimium amounts for staking/unstaking.
	MinimumAmount *struct {
		Staking   string `json:"staking"`
		Unstaking string `json:"unstaking"`
	} `json:"minimum_amount,omitempty"`

	// OnChain Whether the staking operation is on-chain or not.
	OnChain *bool `json:"on_chain,omitempty"`

	// Rewards Describes the rewards earned while staking.
	Rewards struct {
		// Reward Reward earned while staking
		Reward *string `json:"reward,omitempty"`

		// Type Reward type
		Type *AssetRewardsType `json:"type,omitempty"`
	} `json:"rewards"`

	// StakingAsset Staking asset code/name
	StakingAsset string `json:"staking_asset"`
}

// AssetRewardsType Reward type
type AssetRewardsType string

// Balance Account Balance
type Balance map[string]string

// Balance2 defines model for balance-2.
type Balance2 struct {
	Error *Error `json:"error,omitempty"`

	// Result Account Balance
	Result *Balance `json:"result,omitempty"`
}

// Balance3 Account Balance
type Balance3 struct {
	// C Cost basis of open positions
	C *string `json:"c,omitempty"`

	// E Equity: `trade balance + unrealized net profit/loss`
	E *string `json:"e,omitempty"`

	// Eb Equivalent balance (combined balance of all currencies)
	Eb *string `json:"eb,omitempty"`

	// M Margin amount of open positions
	M *string `json:"m,omitempty"`

	// Mf Free margin: `Equity - initial margin (maximum margin available to open new positions)`
	Mf *string `json:"mf,omitempty"`

	// Ml Margin level: `(equity / initial margin) * 100`
	Ml *string `json:"ml,omitempty"`

	// N Unrealized net profit/loss of open positions
	N *string `json:"n,omitempty"`

	// Tb Trade balance (combined balance of all equity currencies)
	Tb *string `json:"tb,omitempty"`

	// Uv Unexecuted value: Value of unfilled and partially filled orders
	Uv *string `json:"uv,omitempty"`

	// V Current floating valuation of open positions
	V *string `json:"v,omitempty"`
}

// Balance4 defines model for balance-4.
type Balance4 struct {
	Error *Error `json:"error,omitempty"`

	// Result Account Balance
	Result *Balance3 `json:"result,omitempty"`
}

// Batchadd defines model for batchadd.
type Batchadd struct {
	// Deadline RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing. min now() + 2 seconds, max now() + 60 seconds.
	Deadline *string `json:"deadline,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce  Nonce `json:"nonce"`
	Orders []struct {
		// Displayvol Order quantity in terms of the base asset used for creating icerber orders
		Displayvol *string `json:"displayvol,omitempty"`

		// Expiretm Expiration time:
		//  * `0` no expiration (default)
		//  * `+<n>` = expire <n> seconds from now, minimum 5 seconds
		//  * `<n>` = unix timestamp of expiration time
		Expiretm *string `json:"expiretm,omitempty"`

		// Leverage Amount of leverage desired (default: none)
		Leverage *string `json:"leverage,omitempty"`

		// Oflags Comma delimited list of order flags
		//
		//   * `post` post-only order (available when ordertype = limit)
		//   * `fcib` prefer fee in base currency (default if selling)
		//   * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
		//   * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
		//   * `viqc`  order volume expressed in quote currency. This is supported only for market orders.
		Oflags *Oflags `json:"oflags,omitempty"`

		// Ordertype Order type
		Ordertype *Ordertype `json:"ordertype,omitempty"`

		// Price Price:
		// * Limit price for `limit` orders
		// * Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
		Price *string `json:"price,omitempty"`

		// Price2 Secondary Price:
		// * Limit price for `stop-loss-limit` and `take-profit-limit` orders
		//
		// >  Note: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Relative prices can be suffixed with a `%` to signify the relative amount as a percentage.
		Price2 *string `json:"price2,omitempty"`

		// Starttm Scheduled start time, can be specified as an absolute timestamp or as a number of seconds in the future:
		//  * `0` now (default)
		//  * `+<n>` schedule start time <n> seconds from now
		//  * `<n>` = unix timestamp of start time
		Starttm *string `json:"starttm,omitempty"`

		// Stptype Self trade prevention behaviour definition:
		// * cancel_newest - if self trade is triggered, arriving order will be canceled
		// * cancel_oldest - if self trade is triggered, resting order will be canceled
		// * cancel_both - if self trade is triggered, both arriving and resting orders will be canceled
		Stptype *BatchaddOrdersStptype `json:"stptype,omitempty"`

		// Timeinforce Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.
		Timeinforce *BatchaddOrdersTimeinforce `json:"timeinforce,omitempty"`

		// Trigger Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
		// >  Note: This `trigger` type will as well be used for associated conditional close orders.
		Trigger *BatchaddOrdersTrigger `json:"trigger,omitempty"`

		// Userref User reference id
		// `userref` is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a `userref` corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using `userref` instead of our `txid`, where supported.
		Userref *int32 `json:"userref,omitempty"`

		// Volume Order quantity in terms of the base asset
		// > Note: Volume can be specified as `0` for closing margin orders to automatically fill the requisite quantity.
		Volume *string `json:"volume,omitempty"`
	} `json:"orders"`

	// Pair Asset pair `id` or `altname`
	Pair string `json:"pair"`

	// Validate Validate inputs only. Do not submit order.
	Validate *bool `json:"validate,omitempty"`
}

// BatchaddOrdersStptype Self trade prevention behaviour definition:
// * cancel_newest - if self trade is triggered, arriving order will be canceled
// * cancel_oldest - if self trade is triggered, resting order will be canceled
// * cancel_both - if self trade is triggered, both arriving and resting orders will be canceled
type BatchaddOrdersStptype string

// BatchaddOrdersTimeinforce Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.
type BatchaddOrdersTimeinforce string

// BatchaddOrdersTrigger Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
// >  Note: This `trigger` type will as well be used for associated conditional close orders.
type BatchaddOrdersTrigger string

// Batchadd2 defines model for batchadd-2.
type Batchadd2 struct {
	Error  *[]Error `json:"error,omitempty"`
	Result *struct {
		Orders *[]struct {
			// Descr Order description info
			Descr *string `json:"descr,omitempty"`

			// Error Error description from individual order processing
			Error *string `json:"error,omitempty"`

			// Txid Transaction ID for order
			// <br><sup><sub>(if order was added successfully)</sup></sub>
			Txid *string `json:"txid,omitempty"`
		} `json:"orders,omitempty"`
	} `json:"result,omitempty"`
}

// Batchcancel defines model for batchcancel.
type Batchcancel struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce  Nonce `json:"nonce"`
	Orders []struct {
		// Txid Open orders transaction ID (txid) or user reference (userref)
		Txid *Batchcancel_Orders_Txid `json:"txid,omitempty"`
	} `json:"orders"`
}

// BatchcancelOrdersTxid0 defines model for .
type BatchcancelOrdersTxid0 = string

// BatchcancelOrdersTxid1 defines model for .
type BatchcancelOrdersTxid1 = int

// Batchcancel_Orders_Txid Open orders transaction ID (txid) or user reference (userref)
type Batchcancel_Orders_Txid struct {
	union json.RawMessage
}

// Batchcancel2 defines model for batchcancel-2.
type Batchcancel2 struct {
	Error  *[]Error `json:"error,omitempty"`
	Result *struct {
		// Count Number of orders cancelled.
		Count *int32 `json:"count,omitempty"`
	} `json:"result,omitempty"`
}

// Cancel defines model for cancel.
type Cancel struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Txid Open order transaction ID (txid) or user reference (userref)
	Txid Cancel_Txid `json:"txid"`
}

// CancelTxid0 defines model for .
type CancelTxid0 = string

// CancelTxid1 defines model for .
type CancelTxid1 = int

// Cancel_Txid Open order transaction ID (txid) or user reference (userref)
type Cancel_Txid struct {
	union json.RawMessage
}

// Cancel2 defines model for cancel-2.
type Cancel2 struct {
	Error  *[]Error `json:"error,omitempty"`
	Result *struct {
		// Count Number of orders cancelled.
		Count *int32 `json:"count,omitempty"`

		// Pending if set, order(s) is/are pending cancellation
		Pending *bool `json:"pending,omitempty"`
	} `json:"result,omitempty"`
}

// Cancel3 defines model for cancel-3.
type Cancel3 struct {
	// Asset Asset being withdrawn
	Asset string `json:"asset"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Refid Withdrawal reference ID
	Refid string `json:"refid"`
}

// Closed defines model for closed.
type Closed struct {
	// Closetm Unix timestamp of when order was closed
	Closetm *float32 `json:"closetm,omitempty"`

	// Cost Total cost (quote currency unless)
	Cost *string `json:"cost,omitempty"`

	// Descr Order description info
	Descr *struct {
		// Close Conditional close order description (if conditional close set)
		Close *string `json:"close,omitempty"`

		// Leverage Amount of leverage
		Leverage *string `json:"leverage,omitempty"`

		// Order Order description
		Order *string `json:"order,omitempty"`

		// Ordertype Order type
		Ordertype *Ordertype `json:"ordertype,omitempty"`

		// Pair Asset pair
		Pair *string `json:"pair,omitempty"`

		// Price primary price
		Price *string `json:"price,omitempty"`

		// Price2 Secondary price
		Price2 *string `json:"price2,omitempty"`

		// Type Type of order (buy/sell)
		Type *ClosedDescrType `json:"type,omitempty"`
	} `json:"descr,omitempty"`

	// Expiretm Unix timestamp of order end time (or 0 if not set)
	Expiretm *float32 `json:"expiretm,omitempty"`

	// Fee Total fee (quote currency)
	Fee *string `json:"fee,omitempty"`

	// Limitprice Triggered limit price (quote currency, when limit based order type triggered)
	Limitprice *string `json:"limitprice,omitempty"`

	// Misc Comma delimited list of miscellaneous info
	//
	//   * `stopped` triggered by stop price
	//   * `touched` triggered by touch price
	//   * `liquidated` liquidation
	//   * `partial` partial fill
	Misc *string `json:"misc,omitempty"`

	// Oflags Comma delimited list of order flags
	//
	//   * `post` post-only order (available when ordertype = limit)
	//   * `fcib` prefer fee in base currency (default if selling)
	//   * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
	//   * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
	//   * `viqc`  order volume expressed in quote currency. This is supported only for market orders.
	Oflags *Oflags `json:"oflags,omitempty"`

	// Opentm Unix timestamp of when order was placed
	Opentm *float32 `json:"opentm,omitempty"`

	// Price Average price (quote currency)
	Price *string `json:"price,omitempty"`

	// Reason Additional info on status (if any)
	Reason *string `json:"reason,omitempty"`

	// Refid Referral order transaction ID that created this order
	Refid *string `json:"refid,omitempty"`

	// Starttm Unix timestamp of order start time (or 0 if not set)
	Starttm *float32 `json:"starttm,omitempty"`

	// Status Status of order
	//   * pending = order pending book entry
	//   * open = open order
	//   * closed = closed order
	//   * canceled = order canceled
	//   * expired = order expired
	Status *ClosedStatus `json:"status,omitempty"`

	// Stopprice Stop price (quote currency)
	Stopprice *string `json:"stopprice,omitempty"`

	// Trades List of trade IDs related to order (if trades info requested and data available)
	Trades *[]string `json:"trades,omitempty"`

	// Trigger Price signal used to trigger "stop-loss" "take-profit" "stop-loss-limit" "take-profit-limit" orders.
	//   * `last` is the implied trigger if this field is not set.
	Trigger *ClosedTrigger `json:"trigger,omitempty"`

	// Userref User reference id
	Userref *int `json:"userref,omitempty"`

	// Vol Volume of order (base currency)
	Vol *string `json:"vol,omitempty"`

	// VolExec Volume executed (base currency)
	VolExec *string `json:"vol_exec,omitempty"`
}

// ClosedDescrType Type of order (buy/sell)
type ClosedDescrType string

// ClosedStatus Status of order
//   - pending = order pending book entry
//   - open = open order
//   - closed = closed order
//   - canceled = order canceled
//   - expired = order expired
type ClosedStatus string

// ClosedTrigger Price signal used to trigger "stop-loss" "take-profit" "stop-loss-limit" "take-profit-limit" orders.
//   - `last` is the implied trigger if this field is not set.
type ClosedTrigger string

// Closed2 defines model for closed-2.
type Closed2 struct {
	Error *Error `json:"error,omitempty"`

	// Result Closed Orders
	Result *struct {
		Closed *map[string]Closed `json:"closed,omitempty"`

		// Count Amount of available order info matching criteria
		Count *int `json:"count,omitempty"`
	} `json:"result,omitempty"`
}

// Deposit Deposit
type Deposit struct {
	// Aclass Asset class
	Aclass *string `json:"aclass,omitempty"`

	// Amount Amount deposited
	Amount *string `json:"amount,omitempty"`

	// Asset Asset
	Asset *string `json:"asset,omitempty"`

	// Fee Fees paid
	Fee *interface{} `json:"fee,omitempty"`

	// Info Method transaction information
	Info *string `json:"info,omitempty"`

	// Method Name of deposit method
	Method *string `json:"method,omitempty"`

	// Refid Reference ID
	Refid *string `json:"refid,omitempty"`

	// Status Status of deposit<br>
	// <sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
	Status *interface{} `json:"status,omitempty"`

	// StatusProp Addition status properties <sup><sub>(if available)</sup></sub><br>
	//   * `return` A return transaction initiated by Kraken
	//   * `onhold` Deposit is on hold pending review
	StatusProp *DepositStatusProp `json:"status-prop,omitempty"`

	// Time Unix timestamp when request was made
	Time *int32 `json:"time,omitempty"`

	// Txid Method transaction ID
	Txid *string `json:"txid,omitempty"`
}

// DepositStatusProp Addition status properties <sup><sub>(if available)</sup></sub><br>
//   - `return` A return transaction initiated by Kraken
//   - `onhold` Deposit is on hold pending review
type DepositStatusProp string

// Depth defines model for depth.
type Depth struct {
	Error  *Error                     `json:"error,omitempty"`
	Result *map[string]OrderBookEntry `json:"result,omitempty"`
}

// Edit defines model for edit.
type Edit struct {
	// CancelResponse Used to interpret if client wants to receive pending replace, before the order is completely replaced
	CancelResponse *bool `json:"cancel_response,omitempty"`

	// Deadline RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing. min now() + 2 seconds, max now() + 60 seconds.
	Deadline *string `json:"deadline,omitempty"`

	// Displayvol Order quantity in terms of the base asset, used to create an iceberg order.
	Displayvol *string `json:"displayvol,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Oflags Comma delimited list of order flags. Only these flags can be changed: - post post-only order (available when ordertype = limit). All the flags from the parent order are retained except post-only. post-only needs to be explicitly mentioned on edit request.
	Oflags *interface{} `json:"oflags,omitempty"`

	// Pair Asset pair `id` or `altname`
	Pair string `json:"pair"`

	// Price Price
	//
	// * Limit price for `limit` orders
	// * Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders
	Price *string `json:"price,omitempty"`

	// Price2 Secondary Price
	//
	// * Limit price for `stop-loss-limit` and `take-profit-limit` orders
	//
	// >  Note: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Relative prices can be suffixed with a `%` to signify the relative amount as a percentage.
	Price2 *string `json:"price2,omitempty"`

	// Txid Original Order ID or User Reference Id (userref) which is user-specified integer id used with the original order. If userref is not unique and was used with multiple order, edit request is denied with an error.
	Txid Edit_Txid `json:"txid"`

	// Userref User reference id
	//
	// `userref` is an optional user-specified integer id associated with edit request.
	//  >  Note: userref from parent order will not be retained on the new order after edit.
	Userref *int32 `json:"userref,omitempty"`

	// Validate Validate inputs only. Do not submit order.
	Validate *bool `json:"validate,omitempty"`

	// Volume Order quantity in terms of the base asset.
	Volume *string `json:"volume,omitempty"`
}

// EditTxid0 defines model for .
type EditTxid0 = string

// EditTxid1 defines model for .
type EditTxid1 = int

// Edit_Txid Original Order ID or User Reference Id (userref) which is user-specified integer id used with the original order. If userref is not unique and was used with multiple order, edit request is denied with an error.
type Edit_Txid struct {
	union json.RawMessage
}

// Edit2 defines model for edit-2.
type Edit2 struct {
	Error  *[]Error `json:"error,omitempty"`
	Result *struct {
		// Descr Order description info
		Descr *struct {
			// Order Order description
			Order *string `json:"order,omitempty"`
		} `json:"descr,omitempty"`

		// ErrorMessage Error message if unsuccessful
		ErrorMessage *string `json:"error_message,omitempty"`

		// Newuserref Original userref if passed with the request
		Newuserref *string `json:"newuserref,omitempty"`

		// Olduserref Original userref if passed with the request
		Olduserref *string `json:"olduserref,omitempty"`

		// OrdersCancelled Number of orders cancelled (either 0 or 1)
		OrdersCancelled *int `json:"orders_cancelled,omitempty"`

		// Originaltxid Original transaction ID
		Originaltxid *string `json:"originaltxid,omitempty"`

		// Price Updated price
		Price *string `json:"price,omitempty"`

		// Price2 Updated price2
		Price2 *string `json:"price2,omitempty"`

		// Status Status of the order: Ok or Err
		Status *string `json:"status,omitempty"`

		// Txid New Transaction ID
		// <br><sup><sub>(if order was added successfully)</sup></sub>
		Txid *string `json:"txid,omitempty"`

		// Volume Updated volume
		Volume *string `json:"volume,omitempty"`
	} `json:"result,omitempty"`
}

// Error defines model for error.
type Error = []string

// Fees Fee Tier Info
type Fees struct {
	// Fee Current fee (in percent)
	Fee *string `json:"fee,omitempty"`

	// MaxFee maximum fee for pair (if not fixed fee)
	MaxFee *string `json:"max_fee,omitempty"`

	// MinFee minimum fee for pair (if not fixed fee)
	MinFee *string `json:"min_fee,omitempty"`

	// NextFee next tier's fee for pair (if not fixed fee,  null if at lowest fee tier)
	NextFee *string `json:"next_fee"`

	// NextVolume volume level of next tier (if not fixed fee. null if at lowest fee tier)
	NextVolume *string `json:"next_volume"`

	// TierVolume volume level of current tier (if not fixed fee. null if at lowest fee tier)
	TierVolume *string `json:"tier_volume"`
}

// History Trade History
type History struct {
	// Count Amount of available trades matching criteria
	Count *int `json:"count,omitempty"`

	// Trades Trade info
	Trades *map[string]Trade2 `json:"trades,omitempty"`
}

// History2 defines model for history-2.
type History2 struct {
	Error *Error `json:"error,omitempty"`

	// Result Trade History
	Result *History `json:"result,omitempty"`
}

// Info Asset Info
type Info struct {
	// Aclass Asset Class
	Aclass *string `json:"aclass,omitempty"`

	// Altname Alternate name
	Altname *string `json:"altname,omitempty"`

	// CollateralValue Valuation as margin collateral (if applicable)
	CollateralValue *float32 `json:"collateral_value,omitempty"`

	// Decimals Scaling decimal places for record keeping
	Decimals *int `json:"decimals,omitempty"`

	// DisplayDecimals Scaling decimal places for output display
	DisplayDecimals *int `json:"display_decimals,omitempty"`

	// Status Status of asset. Possible values: `enabled`, `deposit_only`, `withdrawal_only`, `funding_temporarily_disabled`.
	Status *string `json:"status,omitempty"`
}

// Info2 defines model for info-2.
type Info2 struct {
	Error  *Error           `json:"error,omitempty"`
	Result *map[string]Info `json:"result,omitempty"`
}

// Info3 defines model for info-3.
type Info3 struct {
	Error *Error `json:"error,omitempty"`

	// Result Ledgers Info
	Result *struct {
		// Count Amount of available ledger info matching criteria
		Count  *int               `json:"count,omitempty"`
		Ledger *map[string]Ledger `json:"ledger,omitempty"`
	} `json:"result,omitempty"`
}

// Info4 defines model for info-4.
type Info4 struct {
	// Amount Amount to be withdrawn
	Amount string `json:"amount"`

	// Asset Asset being withdrawn
	Asset string `json:"asset"`

	// Key Withdrawal key name, as set up on your account
	Key string `json:"key"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Info5 defines model for info-5.
type Info5 struct {
	Error *Error `json:"error,omitempty"`

	// Result Withdrawal Info
	Result *struct {
		// Amount Net amount that will be sent, after fees
		Amount *string `json:"amount,omitempty"`

		// Fee Amount of fees that will be paid
		Fee *string `json:"fee,omitempty"`

		// Limit Maximum net amount that can be withdrawn right now
		Limit *string `json:"limit,omitempty"`

		// Method Name of the withdrawal method that will be used
		Method *string `json:"method,omitempty"`
	} `json:"result,omitempty"`
}

// Ledger Ledger Entry
type Ledger struct {
	// Aclass Asset class
	Aclass *string `json:"aclass,omitempty"`

	// Amount Transaction amount
	Amount *string `json:"amount,omitempty"`

	// Asset Asset
	Asset *string `json:"asset,omitempty"`

	// Balance Resulting balance
	Balance *string `json:"balance,omitempty"`

	// Fee Transaction fee
	Fee *string `json:"fee,omitempty"`

	// Refid Reference Id
	Refid *string `json:"refid,omitempty"`

	// Subtype Additional info relating to the ledger entry type, where applicable
	Subtype *string `json:"subtype,omitempty"`

	// Time Unix timestamp of ledger
	Time *float32 `json:"time,omitempty"`

	// Type Type of ledger entry
	Type *LedgerType `json:"type,omitempty"`
}

// LedgerType Type of ledger entry
type LedgerType string

// StatusType Type of status entry
type StatusType string

// PosStatusType Type of ledger entry
type PosStatusType string

// Lock defines model for lock.
type Lock struct {
	// Days Days the funds are locked.
	Days float32 `json:"days"`

	// Percentage Percentage of the funds that are locked (0 - 100)
	Percentage float32 `json:"percentage"`
}

// Method Deposit Method
type Method struct {
	// AddressSetupFee Whether or not method has an address setup fee
	AddressSetupFee *string `json:"address-setup-fee,omitempty"`

	// Fee Amount of fees that will be paid
	Fee *string `json:"fee,omitempty"`

	// GenAddress Whether new addresses can be generated for this method.
	GenAddress *bool `json:"gen-address,omitempty"`

	// Limit Maximum net amount that can be deposited right now, or false if no limit
	Limit *interface{} `json:"limit,omitempty"`

	// Method Name of deposit method
	Method *string `json:"method,omitempty"`
}

// Methods defines model for methods.
type Methods struct {
	// Asset Asset being deposited
	Asset string `json:"asset"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Methods2 defines model for methods-2.
type Methods2 struct {
	Error  *Error    `json:"error,omitempty"`
	Result *[]Method `json:"result,omitempty"`
}

// Nonce Nonce used in construction of `API-Sign` header
type Nonce = int32

// Oflags Comma delimited list of order flags
//
//   - `post` post-only order (available when ordertype = limit)
//   - `fcib` prefer fee in base currency (default if selling)
//   - `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
//   - `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
//   - `viqc`  order volume expressed in quote currency. This is supported only for market orders.
type Oflags = string

// Ohlc defines model for ohlc.
type Ohlc struct {
	Error  *Error       `json:"error,omitempty"`
	Result *Ohlc_Result `json:"result,omitempty"`
}

// Ohlc_Result defines model for Ohlc.Result.
type Ohlc_Result struct {
	// Last ID to be used as since when polling for new, committed OHLC data
	Last                 *int                `json:"last,omitempty"`
	AdditionalProperties map[string]TickData `json:"-"`
}

// Open Open Order
type Open = Order

// Open2 defines model for open-2.
type Open2 struct {
	Error *Error `json:"error,omitempty"`

	// Result Open Orders
	Result *struct {
		Open *map[string]Open `json:"open,omitempty"`
	} `json:"result,omitempty"`
}

// Order Open Order
type Order struct {
	// Cost Total cost (quote currency unless)
	Cost *string `json:"cost,omitempty"`

	// Descr Order description info
	Descr *struct {
		// Close Conditional close order description (if conditional close set)
		Close *string `json:"close,omitempty"`

		// Leverage Amount of leverage
		Leverage *string `json:"leverage,omitempty"`

		// Order Order description
		Order *string `json:"order,omitempty"`

		// Ordertype Order type
		Ordertype *Ordertype `json:"ordertype,omitempty"`

		// Pair Asset pair
		Pair *string `json:"pair,omitempty"`

		// Price primary price
		Price *string `json:"price,omitempty"`

		// Price2 Secondary price
		Price2 *string `json:"price2,omitempty"`

		// Type Type of order (buy/sell)
		Type *OrderDescrType `json:"type,omitempty"`
	} `json:"descr,omitempty"`

	// Expiretm Unix timestamp of order end time (or 0 if not set)
	Expiretm *float32 `json:"expiretm,omitempty"`

	// Fee Total fee (quote currency)
	Fee *string `json:"fee,omitempty"`

	// Limitprice Triggered limit price (quote currency, when limit based order type triggered)
	Limitprice *string `json:"limitprice,omitempty"`

	// Misc Comma delimited list of miscellaneous info
	//
	//   * `stopped` triggered by stop price
	//   * `touched` triggered by touch price
	//   * `liquidated` liquidation
	//   * `partial` partial fill
	Misc *string `json:"misc,omitempty"`

	// Oflags Comma delimited list of order flags
	//
	//   * `post` post-only order (available when ordertype = limit)
	//   * `fcib` prefer fee in base currency (default if selling)
	//   * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
	//   * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
	//   * `viqc`  order volume expressed in quote currency. This is supported only for market orders.
	Oflags *Oflags `json:"oflags,omitempty"`

	// Opentm Unix timestamp of when order was placed
	Opentm *float32 `json:"opentm,omitempty"`

	// Price Average price (quote currency)
	Price *string `json:"price,omitempty"`

	// Refid Referral order transaction ID that created this order
	Refid *string `json:"refid,omitempty"`

	// Starttm Unix timestamp of order start time (or 0 if not set)
	Starttm *float32 `json:"starttm,omitempty"`

	// Status Status of order
	//   * pending = order pending book entry
	//   * open = open order
	//   * closed = closed order
	//   * canceled = order canceled
	//   * expired = order expired
	Status *OrderStatus `json:"status,omitempty"`

	// Stopprice Stop price (quote currency)
	Stopprice *string `json:"stopprice,omitempty"`

	// Trades List of trade IDs related to order (if trades info requested and data available)
	Trades *[]string `json:"trades,omitempty"`

	// Trigger Price signal used to trigger "stop-loss" "take-profit" "stop-loss-limit" "take-profit-limit" orders.
	//   * `last` is the implied trigger if this field is not set.
	Trigger *OrderTrigger `json:"trigger,omitempty"`

	// Userref User reference id
	Userref *string `json:"userref,omitempty"`

	// Vol Volume of order (base currency)
	Vol *string `json:"vol,omitempty"`

	// VolExec Volume executed (base currency)
	VolExec *string `json:"vol_exec,omitempty"`
}

// OrderDescrType Type of order (buy/sell)
type OrderDescrType string

// OrderStatus Status of order
//   - pending = order pending book entry
//   - open = open order
//   - closed = closed order
//   - canceled = order canceled
//   - expired = order expired
type OrderStatus string

// OrderTrigger Price signal used to trigger "stop-loss" "take-profit" "stop-loss-limit" "take-profit-limit" orders.
//   - `last` is the implied trigger if this field is not set.
type OrderTrigger string

// OrderBookEntry Asset Pair Order Book Entries
type OrderBookEntry struct {
	// Asks Ask side array of entries `[<price>, <volume>, <timestamp>]`
	Asks *[]OrderBookEntry_Asks_Item `json:"asks,omitempty"`

	// Bid Bid side array of entries `[<price>, <volume>, <timestamp>]`
	Bid *[]OrderBookEntry_Bid_Item `json:"bid,omitempty"`
}

// OrderBookEntryAsks0 defines model for .
type OrderBookEntryAsks0 = string

// OrderBookEntryAsks1 defines model for .
type OrderBookEntryAsks1 = int

// OrderBookEntry_Asks_Item defines model for orderBookEntry.asks.Item.
type OrderBookEntry_Asks_Item struct {
	union json.RawMessage
}

// OrderBookEntryBid0 defines model for .
type OrderBookEntryBid0 = string

// OrderBookEntryBid1 defines model for .
type OrderBookEntryBid1 = int

// OrderBookEntry_Bid_Item defines model for orderBookEntry.bid.Item.
type OrderBookEntry_Bid_Item struct {
	union json.RawMessage
}

// Ordertype Order type
type Ordertype string

// Pairs Trading Asset Pair
type Pairs struct {
	// AclassBase Asset class of base component
	AclassBase *string `json:"aclass_base,omitempty"`

	// AclassQuote Asset class of quote component
	AclassQuote *string `json:"aclass_quote,omitempty"`

	// Altname Alternate pair name
	Altname *string `json:"altname,omitempty"`

	// Base Asset ID of base component
	Base *string `json:"base,omitempty"`

	// CostDecimals Scaling decimal places for cost
	CostDecimals *int `json:"cost_decimals,omitempty"`

	// Costmin Minimum order cost (in terms of quote currency)
	Costmin *string `json:"costmin,omitempty"`

	// FeeVolumeCurrency Volume discount currency
	FeeVolumeCurrency *string `json:"fee_volume_currency,omitempty"`

	// Fees Fee schedule array in `[<volume>, <percent fee>]` tuples
	Fees *[][]float32 `json:"fees,omitempty"`

	// FeesMaker Maker fee schedule array in `[<volume>, <percent fee>]`  tuples (if on maker/taker)
	FeesMaker *[][]float32 `json:"fees_maker,omitempty"`

	// LeverageBuy Array of leverage amounts available when buying
	LeverageBuy *[]int `json:"leverage_buy,omitempty"`

	// LeverageSell Array of leverage amounts available when selling
	LeverageSell *[]int `json:"leverage_sell,omitempty"`

	// Lot Volume lot size
	Lot *string `json:"lot,omitempty"`

	// LotDecimals Scaling decimal places for volume
	LotDecimals *int `json:"lot_decimals,omitempty"`

	// LotMultiplier Amount to multiply lot volume by to get currency volume
	LotMultiplier *int `json:"lot_multiplier,omitempty"`

	// MarginCall Margin call level
	MarginCall *int `json:"margin_call,omitempty"`

	// MarginStop Stop-out/liquidation margin level
	MarginStop *int `json:"margin_stop,omitempty"`

	// Ordermin Minimum order size (in terms of base currency)
	Ordermin *string `json:"ordermin,omitempty"`

	// PairDecimals Scaling decimal places for pair
	PairDecimals *int `json:"pair_decimals,omitempty"`

	// Quote Asset ID of quote component
	Quote *string `json:"quote,omitempty"`

	// Status Status of asset. Possible values: `online`, `cancel_only`, `post_only`, `limit_only`, `reduce_only`.
	Status *string `json:"status,omitempty"`

	// TickSize Minimum increment between valid price levels
	TickSize *string `json:"tick_size,omitempty"`

	// Wsname WebSocket pair name (if available)
	Wsname *string `json:"wsname,omitempty"`
}

// Query defines model for query.
type Query struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`

	// Txid Comma delimited list of transaction IDs to query info about (50 maximum)
	Txid string `json:"txid"`

	// Userref Restrict results to given user reference id
	Userref *int32 `json:"userref,omitempty"`
}

// Query2 defines model for query-2.
type Query2 struct {
	Error  *Error                                         `json:"error,omitempty"`
	Result *map[string]Query2_Result_AdditionalProperties `json:"result,omitempty"`
}

// Query2_Result_AdditionalProperties defines model for query-2.result.AdditionalProperties.
type Query2_Result_AdditionalProperties struct {
	union json.RawMessage
}

// Query3 defines model for query-3.
type Query3 struct {
	Error  *Error             `json:"error,omitempty"`
	Result *map[string]Ledger `json:"result,omitempty"`
}

// Recent defines model for recent.
type Recent struct {
	// Asset Asset being deposited
	Asset string `json:"asset"`

	// Method Name of the deposit method
	Method *string `json:"method,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Recent2 defines model for recent-2.
type Recent2 struct {
	Error  *Error     `json:"error,omitempty"`
	Result *[]Deposit `json:"result,omitempty"`
}

// Recent3 defines model for recent-3.
type Recent3 struct {
	// Asset Asset being withdrawn
	Asset string `json:"asset"`

	// Method Name of the withdrawal method
	Method *string `json:"method,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Recent4 defines model for recent-4.
type Recent4 struct {
	Error  *Error         `json:"error,omitempty"`
	Result *[]Withdrawal3 `json:"result,omitempty"`
}

// Spread Array of spread entries
// `[int <time>, string <bid>, string <ask>]`
type Spread = []Spread_Item

// Spread0 defines model for .
type Spread0 = string

// Spread1 defines model for .
type Spread1 = int

// Spread_Item defines model for spread.Item.
type Spread_Item struct {
	union json.RawMessage
}

// Spread2 defines model for spread-2.
type Spread2 struct {
	Error  *Error          `json:"error,omitempty"`
	Result *Spread2_Result `json:"result,omitempty"`
}

// Spread2_Result defines model for Spread2.Result.
type Spread2_Result struct {
	// Last ID to be used as since when polling for new spread data
	Last                 *int                `json:"last,omitempty"`
	AdditionalProperties map[string][]Spread `json:"-"`
}

// TickData Array of tick data arrays
// `[int <time>, string <open>, string <high>, string <low>, string <close>, string <vwap>, string <volume>, int <count>]`
type TickData = [][]TickData_Item

// TickData0 defines model for .
type TickData0 = string

// TickData1 defines model for .
type TickData1 = int

// TickData_Item defines model for tickData.Item.
type TickData_Item struct {
	union json.RawMessage
}

// Ticker Asset Ticker Info
type Ticker struct {
	// A Ask `[<price>, <whole lot volume>, <lot volume>]`
	A *[]string `json:"a,omitempty"`

	// B Bid `[<price>, <whole lot volume>, <lot volume>]`
	B *[]string `json:"b,omitempty"`

	// C Last trade closed `[<price>, <lot volume>]`
	C *[]string `json:"c,omitempty"`

	// H High `[<today>, <last 24 hours>]`
	H *[]string `json:"h,omitempty"`

	// L Low `[<today>, <last 24 hours>]`
	L *[]string `json:"l,omitempty"`

	// O Today's opening price
	O *string `json:"o,omitempty"`

	// P Volume weighted average price `[<today>, <last 24 hours>]`
	P *[]string `json:"p,omitempty"`

	// T Number of trades `[<today>, <last 24 hours>]`
	T *[]int `json:"t,omitempty"`

	// V Volume `[<today>, <last 24 hours>]`
	V *[]string `json:"v,omitempty"`
}

// Ticker2 defines model for ticker-2.
type Ticker2 struct {
	Error  *Error             `json:"error,omitempty"`
	Result *map[string]Ticker `json:"result,omitempty"`
}

// Time Success response
type Time struct {
	Error  *Error `json:"error,omitempty"`
	Result *struct {
		// Rfc1123 RFC 1123 time format
		Rfc1123 *string `json:"rfc1123,omitempty"`

		// Unixtime Unix timestamp
		Unixtime *int `json:"unixtime,omitempty"`
	} `json:"result,omitempty"`
}

// Trade Array of trade entries
// `[<price>, <volume>, <time>, <buy/sell>, <market/limit>, <miscellaneous>, <trade_id>]`
type Trade = []Trade_Item

// Trade0 defines model for .
type Trade0 = string

// Trade1 defines model for .
type Trade1 = float32

// Trade_Item defines model for trade.Item.
type Trade_Item struct {
	union json.RawMessage
}

// Trade2 Trade Info
type Trade2 struct {
	// Ccost Total cost of closed portion of position (quote currency)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Ccost *interface{} `json:"ccost,omitempty"`

	// Cfee Total fee of closed portion of position (quote currency)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Cfee *interface{} `json:"cfee,omitempty"`

	// Cmargin Total margin freed in closed portion of position (quote currency)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Cmargin *interface{} `json:"cmargin,omitempty"`

	// Cost Total cost of order (quote currency)
	Cost *string `json:"cost,omitempty"`

	// Cprice Average price of closed portion of position (quote currency)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Cprice *interface{} `json:"cprice,omitempty"`

	// Cvol Total fee of closed portion of position (quote currency)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Cvol *interface{} `json:"cvol,omitempty"`

	// Fee Total fee (quote currency)
	Fee *string `json:"fee,omitempty"`

	// Margin Initial margin (quote currency)
	Margin *string `json:"margin,omitempty"`

	// Misc Comma delimited list of miscellaneous info:
	// * `closing` &mdash; Trade closes all or part of a position
	Misc *string `json:"misc,omitempty"`

	// Net Net profit/loss of closed portion of position (quote currency, quote currency scale)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Net *interface{} `json:"net,omitempty"`

	// Ordertxid Order responsible for execution of trade
	Ordertxid *string `json:"ordertxid,omitempty"`

	// Ordertype Order type
	Ordertype *string `json:"ordertype,omitempty"`

	// Pair Asset pair
	Pair *string `json:"pair,omitempty"`

	// Posstatus Position status (open/closed)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Posstatus *string `json:"posstatus,omitempty"`

	// Price Average price order was executed at (quote currency)
	Price *string `json:"price,omitempty"`

	// Time Unix timestamp of trade
	Time *float32 `json:"time,omitempty"`

	// Trades List of closing trades for position (if available)
	// <br><sub><sup>Only present if trade opened a position</sub></sup>
	Trades *[]string `json:"trades,omitempty"`

	// Type Type of order (buy/sell)
	Type *string `json:"type,omitempty"`

	// Vol Volume (base currency)
	Vol *string `json:"vol,omitempty"`
}

// Trades defines model for trades.
type Trades struct {
	Error  *Error         `json:"error,omitempty"`
	Result *Trades_Result `json:"result,omitempty"`
}

// Trades_Result defines model for Trades.Result.
type Trades_Result struct {
	// Last ID to be used as since when polling for new trade data
	Last                 *string          `json:"last,omitempty"`
	AdditionalProperties map[string]Trade `json:"-"`
}

// Transaction defines model for transaction.
type Transaction struct {
	// Amount The transaction amount
	Amount *string `json:"amount,omitempty"`

	// Asset Asset code/name
	Asset *string `json:"asset,omitempty"`

	// BondEnd Unix timestamp of the end of bond period (applicable only to `bonding` transactions).
	BondEnd *int `json:"bond_end,omitempty"`

	// BondStart Unix timestamp from the start of bond period (applicable only to `bonding` transactions).
	BondStart *int `json:"bond_start,omitempty"`

	// Refid The reference ID of the transaction.
	Refid *string `json:"refid,omitempty"`

	// Status Transaction status
	Status *TransactionStatus `json:"status,omitempty"`

	// Time Unix timestamp when the transaction was initiated.
	Time *int `json:"time,omitempty"`

	// Type The type of transaction.
	Type *TransactionType `json:"type,omitempty"`
}

// TransactionStatus Transaction status
type TransactionStatus string

// TransactionType The type of transaction.
type TransactionType string

// Volume defines model for volume.
type Volume struct {
	Error *Error `json:"error,omitempty"`

	// Result Trade Volume
	Result *struct {
		// Currency Fee volume currency (will always be USD)
		Currency  *string          `json:"currency,omitempty"`
		Fees      *map[string]Fees `json:"fees,omitempty"`
		FeesMaker *map[string]Fees `json:"fees_maker,omitempty"`

		// Volume Current fee discount volume (in USD, breakdown by subaccount if applicable and logged in to master account)
		Volume *string `json:"volume,omitempty"`
	} `json:"result,omitempty"`
}

// Withdrawal defines model for withdrawal.
type Withdrawal struct {
	// Amount Amount to be withdrawn
	Amount string `json:"amount"`

	// Asset Asset being withdrawn
	Asset string `json:"asset"`

	// Key Withdrawal key name, as set up on your account
	Key string `json:"key"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// Withdrawal2 defines model for withdrawal-2.
type Withdrawal2 struct {
	Error  *Error `json:"error,omitempty"`
	Result *struct {
		// Refid Reference ID
		Refid *string `json:"refid,omitempty"`
	} `json:"result,omitempty"`
}

// Withdrawal3 Withdrawal
type Withdrawal3 struct {
	// Aclass Asset class
	Aclass *string `json:"aclass,omitempty"`

	// Amount Amount withdrawn
	Amount *string `json:"amount,omitempty"`

	// Asset Asset
	Asset *string `json:"asset,omitempty"`

	// Fee Fees paid
	Fee *interface{} `json:"fee,omitempty"`

	// Info Method transaction information
	Info *string `json:"info,omitempty"`

	// Method Name of withdrawal method
	Method *string `json:"method,omitempty"`

	// Refid Reference ID
	Refid *string `json:"refid,omitempty"`

	// Status Status of withdraw<br>
	// <sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
	Status *Withdrawal3Status `json:"status,omitempty"`

	// StatusProp Addition status properties <sup><sub>(if available)</sup></sub><br>
	//   * `cancel-pending` cancelation requested
	//   * `canceled` canceled
	//   * `cancel-denied` cancelation requested but was denied
	//   * `return` a return transaction initiated by Kraken; it cannot be canceled
	//   * `onhold` withdrawal is on hold pending review
	StatusProp *Withdrawal3StatusProp `json:"status-prop,omitempty"`

	// Time Unix timestamp when request was made
	Time *int32 `json:"time,omitempty"`

	// Txid Method transaction ID
	Txid *string `json:"txid,omitempty"`
}

// Withdrawal3Status Status of withdraw<br>
// <sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
type Withdrawal3Status string

// Withdrawal3StatusProp Addition status properties <sup><sub>(if available)</sup></sub><br>
//   - `cancel-pending` cancelation requested
//   - `canceled` canceled
//   - `cancel-denied` cancelation requested but was denied
//   - `return` a return transaction initiated by Kraken; it cannot be canceled
//   - `onhold` withdrawal is on hold pending review
type Withdrawal3StatusProp string

// Aclass defines model for aclass.
type Aclass = string

// Asset defines model for asset.
type Asset = string

// Pair defines model for pair.
type Pair = string

// WildcardPair defines model for wildcard_pair.
type WildcardPair = string

// AddExportFormdataBody defines parameters for AddExport.
type AddExportFormdataBody struct {
	// Description Description for the export
	Description string `json:"description"`

	// Endtm UNIX timestamp for report end time (default now)
	Endtm *int `json:"endtm,omitempty"`

	// Fields Comma-delimited list of fields to include
	//
	// * `trades`: ordertxid, time, ordertype, price, cost, fee, vol, margin, misc, ledgers
	// * `ledgers`: refid, time, type, aclass, asset, amount, fee, balance
	Fields *string `json:"fields,omitempty"`

	// Format File format to export
	Format *AddExportFormdataBodyFormat `json:"format,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Report Type of data to export
	Report AddExportFormdataBodyReport `json:"report"`

	// Starttm UNIX timestamp for report start time (default 1st of the current month)
	Starttm *int `json:"starttm,omitempty"`
}

// AddExportFormdataBodyFormat defines parameters for AddExport.
type AddExportFormdataBodyFormat string

// AddExportFormdataBodyReport defines parameters for AddExport.
type AddExportFormdataBodyReport string

// GetAccountBalanceFormdataBody defines parameters for GetAccountBalance.
type GetAccountBalanceFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// CancelAllOrdersFormdataBody defines parameters for CancelAllOrders.
type CancelAllOrdersFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// CancelAllOrdersAfterFormdataBody defines parameters for CancelAllOrdersAfter.
type CancelAllOrdersAfterFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Timeout Duration (in seconds) to set/extend the timer by
	Timeout int `json:"timeout"`
}

// GetClosedOrdersFormdataBody defines parameters for GetClosedOrders.
type GetClosedOrdersFormdataBody struct {
	// Closetime Which time to use to search
	Closetime *GetClosedOrdersFormdataBodyClosetime `json:"closetime,omitempty"`

	// End Ending unix timestamp or order tx ID of results (inclusive)
	End *int `json:"end,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Ofs Result offset for pagination
	Ofs *int `json:"ofs,omitempty"`

	// Start Starting unix timestamp or order tx ID of results (exclusive)
	Start *int `json:"start,omitempty"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`

	// Userref Restrict results to given user reference id
	Userref *int32 `json:"userref,omitempty"`
}

// GetClosedOrdersFormdataBodyClosetime defines parameters for GetClosedOrders.
type GetClosedOrdersFormdataBodyClosetime string

// ExportStatusFormdataBody defines parameters for ExportStatus.
type ExportStatusFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Report Type of reports to inquire about
	Report ExportStatusFormdataBodyReport `json:"report"`
}

// ExportStatusFormdataBodyReport defines parameters for ExportStatus.
type ExportStatusFormdataBodyReport string

// GetWebsocketsTokenFormdataBody defines parameters for GetWebsocketsToken.
type GetWebsocketsTokenFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetLedgersFormdataBody defines parameters for GetLedgers.
type GetLedgersFormdataBody struct {
	// Aclass Asset class
	Aclass *string `json:"aclass,omitempty"`

	// Asset Comma delimited list of assets to restrict output to
	Asset *string `json:"asset,omitempty"`

	// End Ending unix timestamp or ledger ID of results (inclusive)
	End *int `json:"end,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Ofs Result offset for pagination
	Ofs *int `json:"ofs,omitempty"`

	// Start Starting unix timestamp or ledger ID of results (exclusive)
	Start *int `json:"start,omitempty"`

	// Type Type of ledger to retrieve
	Type *GetLedgersFormdataBodyType `json:"type,omitempty"`
}

// GetLedgersFormdataBodyType defines parameters for GetLedgers.
type GetLedgersFormdataBodyType string

// GetOpenOrdersFormdataBody defines parameters for GetOpenOrders.
type GetOpenOrdersFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`

	// Userref Restrict results to given user reference id
	Userref *int32 `json:"userref,omitempty"`
}

// GetOpenPositionsFormdataBody defines parameters for GetOpenPositions.
type GetOpenPositionsFormdataBody struct {
	// Consolidation Consolidate positions by market/pair
	Consolidation *GetOpenPositionsFormdataBodyConsolidation `json:"consolidation,omitempty"`

	// Docalcs Whether to include P&L calculations
	Docalcs *bool `json:"docalcs,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Txid Comma delimited list of txids to limit output to
	Txid *string `json:"txid,omitempty"`
}

// GetOpenPositionsFormdataBodyConsolidation defines parameters for GetOpenPositions.
type GetOpenPositionsFormdataBodyConsolidation string

// GetLedgersInfoFormdataBody defines parameters for GetLedgersInfo.
type GetLedgersInfoFormdataBody struct {
	// Id Comma delimited list of ledger IDs to query info about (20 maximum)
	Id *string `json:"id,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`
}

// GetTradesInfoFormdataBody defines parameters for GetTradesInfo.
type GetTradesInfoFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`

	// Txid Comma delimited list of transaction IDs to query info about (20 maximum)
	Txid *string `json:"txid,omitempty"`
}

// RemoveExportFormdataBody defines parameters for RemoveExport.
type RemoveExportFormdataBody struct {
	// Id ID of report to delete or cancel
	Id string `json:"id"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Type `delete` can only be used for reports that have already been processed. Use `cancel` for queued or processing reports.
	Type RemoveExportFormdataBodyType `json:"type"`
}

// RemoveExportFormdataBodyType defines parameters for RemoveExport.
type RemoveExportFormdataBodyType string

// RetrieveExportFormdataBody defines parameters for RetrieveExport.
type RetrieveExportFormdataBody struct {
	// Id Report ID to retrieve
	Id string `json:"id"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// StakeFormdataBody defines parameters for Stake.
type StakeFormdataBody struct {
	// Amount Amount of the asset to stake
	Amount string `json:"amount"`

	// Asset Asset to stake (asset ID or `altname`)
	Asset string `json:"asset"`

	// Method Name of the staking option to use (refer to the Staking Assets endpoint for the correct method names for each asset)
	Method string `json:"method"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetStakingAssetInfoFormdataBody defines parameters for GetStakingAssetInfo.
type GetStakingAssetInfoFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetStakingPendingDepositsFormdataBody defines parameters for GetStakingPendingDeposits.
type GetStakingPendingDepositsFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetStakingTransactionsFormdataBody defines parameters for GetStakingTransactions.
type GetStakingTransactionsFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetTradeBalanceFormdataBody defines parameters for GetTradeBalance.
type GetTradeBalanceFormdataBody struct {
	// Asset Base asset used to determine balance
	Asset *string `json:"asset,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// GetTradeVolumeFormdataBody defines parameters for GetTradeVolume.
type GetTradeVolumeFormdataBody struct {
	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Pair Comma delimited list of asset pairs to get fee info on (optional)
	Pair *string `json:"pair,omitempty"`
}

// GetTradeHistoryFormdataBody defines parameters for GetTradeHistory.
type GetTradeHistoryFormdataBody struct {
	// End Ending unix timestamp or trade tx ID of results (inclusive)
	End *int `json:"end,omitempty"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// Ofs Result offset for pagination
	Ofs *int `json:"ofs,omitempty"`

	// Start Starting unix timestamp or trade tx ID of results (exclusive)
	Start *int `json:"start,omitempty"`

	// Trades Whether or not to include trades related to position in output
	Trades *bool `json:"trades,omitempty"`

	// Type Type of trade
	Type *GetTradeHistoryFormdataBodyType `json:"type,omitempty"`
}

// GetTradeHistoryFormdataBodyType defines parameters for GetTradeHistory.
type GetTradeHistoryFormdataBodyType string

// UnstakeFormdataBody defines parameters for Unstake.
type UnstakeFormdataBody struct {
	// Amount Amount of the asset to stake
	Amount string `json:"amount"`

	// Asset Asset to unstake (asset ID or `altname`). Must be a valid staking asset (e.g. `XBT.M`, `XTZ.S`, `ADA.S`)
	Asset string `json:"asset"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`
}

// WalletTransferFormdataBody defines parameters for WalletTransfer.
type WalletTransferFormdataBody struct {
	// Amount Amount to transfer
	Amount string `json:"amount"`

	// Asset Asset to transfer (asset ID or `altname`)
	Asset string `json:"asset"`

	// From Source wallet
	From WalletTransferFormdataBodyFrom `json:"from"`

	// Nonce Nonce used in construction of `API-Sign` header
	Nonce Nonce `json:"nonce"`

	// To Destination wallet
	To WalletTransferFormdataBodyTo `json:"to"`
}

// WalletTransferFormdataBodyFrom defines parameters for WalletTransfer.
type WalletTransferFormdataBodyFrom string

// WalletTransferFormdataBodyTo defines parameters for WalletTransfer.
type WalletTransferFormdataBodyTo string

// GetTradableAssetPairsParams defines parameters for GetTradableAssetPairs.
type GetTradableAssetPairsParams struct {
	// Pair Asset pairs to get data for
	Pair *string `form:"pair,omitempty" json:"pair,omitempty"`

	// Info Info to retrieve (optional)
	//
	//   * `info` = all info
	//   * `leverage` = leverage info
	//   * `fees` = fees schedule
	//   * `margin` = margin info
	Info *GetTradableAssetPairsParamsInfo `form:"info,omitempty" json:"info,omitempty"`
}

// GetTradableAssetPairsParamsInfo defines parameters for GetTradableAssetPairs.
type GetTradableAssetPairsParamsInfo string
type GetSystemStatusResponseStatus string

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {
	// Asset Comma delimited list of assets to get info on
	Asset *Asset `form:"asset,omitempty" json:"asset,omitempty"`

	// Aclass Asset class (optional, default: `currency`)
	Aclass *Aclass `form:"aclass,omitempty" json:"aclass,omitempty"`
}

// GetOrderBookParams defines parameters for GetOrderBook.
type GetOrderBookParams struct {
	// Pair Asset pair to get data for
	Pair Pair `form:"pair" json:"pair"`

	// Count Maximum number of asks/bids
	Count *int `form:"count,omitempty" json:"count,omitempty"`
}

// GetOHLCDataParams defines parameters for GetOHLCData.
type GetOHLCDataParams struct {
	// Pair Asset pair to get data for
	Pair Pair `form:"pair" json:"pair"`

	// Interval Time frame interval in minutes
	Interval *GetOHLCDataParamsInterval `form:"interval,omitempty" json:"interval,omitempty"`

	// Since Return up to 720 OHLC data points since given timestamp
	Since *int `form:"since,omitempty" json:"since,omitempty"`
}

// GetOHLCDataParamsInterval defines parameters for GetOHLCData.
type GetOHLCDataParamsInterval int

// GetRecentSpreadsParams defines parameters for GetRecentSpreads.
type GetRecentSpreadsParams struct {
	// Pair Asset pair to get data for
	Pair Pair `form:"pair" json:"pair"`

	// Since Return spread data since given timestamp
	Since *int `form:"since,omitempty" json:"since,omitempty"`
}

// GetTickerInformationParams defines parameters for GetTickerInformation.
type GetTickerInformationParams struct {
	// Pair Asset pair to get data for (optional, default: all tradeable exchange pairs)
	Pair *WildcardPair `form:"pair,omitempty" json:"pair,omitempty"`
}

// GetRecentTradesParams defines parameters for GetRecentTrades.
type GetRecentTradesParams struct {
	// Pair Asset pair to get data for
	Pair Pair `form:"pair" json:"pair"`

	// Since Return trade data since given timestamp
	Since *string `form:"since,omitempty" json:"since,omitempty"`
}

// AddExportFormdataRequestBody defines body for AddExport for application/x-www-form-urlencoded ContentType.
type AddExportFormdataRequestBody AddExportFormdataBody

// AddOrderFormdataRequestBody defines body for AddOrder for application/x-www-form-urlencoded ContentType.
type AddOrderFormdataRequestBody = Add

// AddOrderBatchFormdataRequestBody defines body for AddOrderBatch for application/x-www-form-urlencoded ContentType.
type AddOrderBatchFormdataRequestBody = Batchadd

// GetAccountBalanceFormdataRequestBody defines body for GetAccountBalance for application/x-www-form-urlencoded ContentType.
type GetAccountBalanceFormdataRequestBody GetAccountBalanceFormdataBody

// CancelAllOrdersFormdataRequestBody defines body for CancelAllOrders for application/x-www-form-urlencoded ContentType.
type CancelAllOrdersFormdataRequestBody CancelAllOrdersFormdataBody

// CancelAllOrdersAfterFormdataRequestBody defines body for CancelAllOrdersAfter for application/x-www-form-urlencoded ContentType.
type CancelAllOrdersAfterFormdataRequestBody CancelAllOrdersAfterFormdataBody

// CancelOrderFormdataRequestBody defines body for CancelOrder for application/x-www-form-urlencoded ContentType.
type CancelOrderFormdataRequestBody = Cancel

// CancelOrderBatchFormdataRequestBody defines body for CancelOrderBatch for application/x-www-form-urlencoded ContentType.
type CancelOrderBatchFormdataRequestBody = Batchcancel

// GetClosedOrdersFormdataRequestBody defines body for GetClosedOrders for application/x-www-form-urlencoded ContentType.
type GetClosedOrdersFormdataRequestBody GetClosedOrdersFormdataBody

// GetDepositAddressesFormdataRequestBody defines body for GetDepositAddresses for application/x-www-form-urlencoded ContentType.
type GetDepositAddressesFormdataRequestBody = Addresses

// GetDepositMethodsFormdataRequestBody defines body for GetDepositMethods for application/x-www-form-urlencoded ContentType.
type GetDepositMethodsFormdataRequestBody = Methods

// GetStatusRecentDepositsFormdataRequestBody defines body for GetStatusRecentDeposits for application/x-www-form-urlencoded ContentType.
type GetStatusRecentDepositsFormdataRequestBody = Recent

// EditOrderFormdataRequestBody defines body for EditOrder for application/x-www-form-urlencoded ContentType.
type EditOrderFormdataRequestBody = Edit

// ExportStatusFormdataRequestBody defines body for ExportStatus for application/x-www-form-urlencoded ContentType.
type ExportStatusFormdataRequestBody ExportStatusFormdataBody

// GetWebsocketsTokenFormdataRequestBody defines body for GetWebsocketsToken for application/x-www-form-urlencoded ContentType.
type GetWebsocketsTokenFormdataRequestBody GetWebsocketsTokenFormdataBody

// GetLedgersFormdataRequestBody defines body for GetLedgers for application/x-www-form-urlencoded ContentType.
type GetLedgersFormdataRequestBody GetLedgersFormdataBody

// GetOpenOrdersFormdataRequestBody defines body for GetOpenOrders for application/x-www-form-urlencoded ContentType.
type GetOpenOrdersFormdataRequestBody GetOpenOrdersFormdataBody

// GetOpenPositionsFormdataRequestBody defines body for GetOpenPositions for application/x-www-form-urlencoded ContentType.
type GetOpenPositionsFormdataRequestBody GetOpenPositionsFormdataBody

// GetLedgersInfoFormdataRequestBody defines body for GetLedgersInfo for application/x-www-form-urlencoded ContentType.
type GetLedgersInfoFormdataRequestBody GetLedgersInfoFormdataBody

// GetOrdersInfoFormdataRequestBody defines body for GetOrdersInfo for application/x-www-form-urlencoded ContentType.
type GetOrdersInfoFormdataRequestBody = Query

// GetTradesInfoFormdataRequestBody defines body for GetTradesInfo for application/x-www-form-urlencoded ContentType.
type GetTradesInfoFormdataRequestBody GetTradesInfoFormdataBody

// RemoveExportFormdataRequestBody defines body for RemoveExport for application/x-www-form-urlencoded ContentType.
type RemoveExportFormdataRequestBody RemoveExportFormdataBody

// RetrieveExportFormdataRequestBody defines body for RetrieveExport for application/x-www-form-urlencoded ContentType.
type RetrieveExportFormdataRequestBody RetrieveExportFormdataBody

// StakeFormdataRequestBody defines body for Stake for application/x-www-form-urlencoded ContentType.
type StakeFormdataRequestBody StakeFormdataBody

// GetStakingAssetInfoFormdataRequestBody defines body for GetStakingAssetInfo for application/x-www-form-urlencoded ContentType.
type GetStakingAssetInfoFormdataRequestBody GetStakingAssetInfoFormdataBody

// GetStakingPendingDepositsFormdataRequestBody defines body for GetStakingPendingDeposits for application/x-www-form-urlencoded ContentType.
type GetStakingPendingDepositsFormdataRequestBody GetStakingPendingDepositsFormdataBody

// GetStakingTransactionsFormdataRequestBody defines body for GetStakingTransactions for application/x-www-form-urlencoded ContentType.
type GetStakingTransactionsFormdataRequestBody GetStakingTransactionsFormdataBody

// GetTradeBalanceFormdataRequestBody defines body for GetTradeBalance for application/x-www-form-urlencoded ContentType.
type GetTradeBalanceFormdataRequestBody GetTradeBalanceFormdataBody

// GetTradeVolumeFormdataRequestBody defines body for GetTradeVolume for application/x-www-form-urlencoded ContentType.
type GetTradeVolumeFormdataRequestBody GetTradeVolumeFormdataBody

// GetTradeHistoryFormdataRequestBody defines body for GetTradeHistory for application/x-www-form-urlencoded ContentType.
type GetTradeHistoryFormdataRequestBody GetTradeHistoryFormdataBody

// UnstakeFormdataRequestBody defines body for Unstake for application/x-www-form-urlencoded ContentType.
type UnstakeFormdataRequestBody UnstakeFormdataBody

// WalletTransferFormdataRequestBody defines body for WalletTransfer for application/x-www-form-urlencoded ContentType.
type WalletTransferFormdataRequestBody WalletTransferFormdataBody

// WithdrawFundsFormdataRequestBody defines body for WithdrawFunds for application/x-www-form-urlencoded ContentType.
type WithdrawFundsFormdataRequestBody = Withdrawal

// CancelWithdrawalFormdataRequestBody defines body for CancelWithdrawal for application/x-www-form-urlencoded ContentType.
type CancelWithdrawalFormdataRequestBody = Cancel3

// GetWithdrawalInformationFormdataRequestBody defines body for GetWithdrawalInformation for application/x-www-form-urlencoded ContentType.
type GetWithdrawalInformationFormdataRequestBody = Info4

// GetStatusRecentWithdrawalsFormdataRequestBody defines body for GetStatusRecentWithdrawals for application/x-www-form-urlencoded ContentType.
type GetStatusRecentWithdrawalsFormdataRequestBody = Recent3

// Getter for additional properties for Ohlc_Result. Returns the specified
// element and whether it was found
func (a Ohlc_Result) Get(fieldName string) (value TickData, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ohlc_Result
func (a *Ohlc_Result) Set(fieldName string, value TickData) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]TickData)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ohlc_Result to handle AdditionalProperties
func (a *Ohlc_Result) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["last"]; found {
		err = json.Unmarshal(raw, &a.Last)
		if err != nil {
			return fmt.Errorf("error reading 'last': %w", err)
		}
		delete(object, "last")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]TickData)
		for fieldName, fieldBuf := range object {
			var fieldVal TickData
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ohlc_Result to handle AdditionalProperties
func (a Ohlc_Result) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Last != nil {
		object["last"], err = json.Marshal(a.Last)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Spread2_Result. Returns the specified
// element and whether it was found
func (a Spread2_Result) Get(fieldName string) (value []Spread, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Spread2_Result
func (a *Spread2_Result) Set(fieldName string, value []Spread) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]Spread)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Spread2_Result to handle AdditionalProperties
func (a *Spread2_Result) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["last"]; found {
		err = json.Unmarshal(raw, &a.Last)
		if err != nil {
			return fmt.Errorf("error reading 'last': %w", err)
		}
		delete(object, "last")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]Spread)
		for fieldName, fieldBuf := range object {
			var fieldVal []Spread
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Spread2_Result to handle AdditionalProperties
func (a Spread2_Result) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Last != nil {
		object["last"], err = json.Marshal(a.Last)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Trades_Result. Returns the specified
// element and whether it was found
func (a Trades_Result) Get(fieldName string) (value Trade, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Trades_Result
func (a *Trades_Result) Set(fieldName string, value Trade) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Trade)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Trades_Result to handle AdditionalProperties
func (a *Trades_Result) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["last"]; found {
		err = json.Unmarshal(raw, &a.Last)
		if err != nil {
			return fmt.Errorf("error reading 'last': %w", err)
		}
		delete(object, "last")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Trade)
		for fieldName, fieldBuf := range object {
			var fieldVal Trade
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Trades_Result to handle AdditionalProperties
func (a Trades_Result) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Last != nil {
		object["last"], err = json.Marshal(a.Last)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsBatchcancelOrdersTxid0 returns the union data inside the Batchcancel_Orders_Txid as a BatchcancelOrdersTxid0
func (t Batchcancel_Orders_Txid) AsBatchcancelOrdersTxid0() (BatchcancelOrdersTxid0, error) {
	var body BatchcancelOrdersTxid0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBatchcancelOrdersTxid0 overwrites any union data inside the Batchcancel_Orders_Txid as the provided BatchcancelOrdersTxid0
func (t *Batchcancel_Orders_Txid) FromBatchcancelOrdersTxid0(v BatchcancelOrdersTxid0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBatchcancelOrdersTxid0 performs a merge with any union data inside the Batchcancel_Orders_Txid, using the provided BatchcancelOrdersTxid0
func (t *Batchcancel_Orders_Txid) MergeBatchcancelOrdersTxid0(v BatchcancelOrdersTxid0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsBatchcancelOrdersTxid1 returns the union data inside the Batchcancel_Orders_Txid as a BatchcancelOrdersTxid1
func (t Batchcancel_Orders_Txid) AsBatchcancelOrdersTxid1() (BatchcancelOrdersTxid1, error) {
	var body BatchcancelOrdersTxid1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBatchcancelOrdersTxid1 overwrites any union data inside the Batchcancel_Orders_Txid as the provided BatchcancelOrdersTxid1
func (t *Batchcancel_Orders_Txid) FromBatchcancelOrdersTxid1(v BatchcancelOrdersTxid1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBatchcancelOrdersTxid1 performs a merge with any union data inside the Batchcancel_Orders_Txid, using the provided BatchcancelOrdersTxid1
func (t *Batchcancel_Orders_Txid) MergeBatchcancelOrdersTxid1(v BatchcancelOrdersTxid1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Batchcancel_Orders_Txid) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Batchcancel_Orders_Txid) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelTxid0 returns the union data inside the Cancel_Txid as a CancelTxid0
func (t Cancel_Txid) AsCancelTxid0() (CancelTxid0, error) {
	var body CancelTxid0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelTxid0 overwrites any union data inside the Cancel_Txid as the provided CancelTxid0
func (t *Cancel_Txid) FromCancelTxid0(v CancelTxid0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelTxid0 performs a merge with any union data inside the Cancel_Txid, using the provided CancelTxid0
func (t *Cancel_Txid) MergeCancelTxid0(v CancelTxid0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCancelTxid1 returns the union data inside the Cancel_Txid as a CancelTxid1
func (t Cancel_Txid) AsCancelTxid1() (CancelTxid1, error) {
	var body CancelTxid1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelTxid1 overwrites any union data inside the Cancel_Txid as the provided CancelTxid1
func (t *Cancel_Txid) FromCancelTxid1(v CancelTxid1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelTxid1 performs a merge with any union data inside the Cancel_Txid, using the provided CancelTxid1
func (t *Cancel_Txid) MergeCancelTxid1(v CancelTxid1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Cancel_Txid) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Cancel_Txid) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEditTxid0 returns the union data inside the Edit_Txid as a EditTxid0
func (t Edit_Txid) AsEditTxid0() (EditTxid0, error) {
	var body EditTxid0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditTxid0 overwrites any union data inside the Edit_Txid as the provided EditTxid0
func (t *Edit_Txid) FromEditTxid0(v EditTxid0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditTxid0 performs a merge with any union data inside the Edit_Txid, using the provided EditTxid0
func (t *Edit_Txid) MergeEditTxid0(v EditTxid0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsEditTxid1 returns the union data inside the Edit_Txid as a EditTxid1
func (t Edit_Txid) AsEditTxid1() (EditTxid1, error) {
	var body EditTxid1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditTxid1 overwrites any union data inside the Edit_Txid as the provided EditTxid1
func (t *Edit_Txid) FromEditTxid1(v EditTxid1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditTxid1 performs a merge with any union data inside the Edit_Txid, using the provided EditTxid1
func (t *Edit_Txid) MergeEditTxid1(v EditTxid1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Edit_Txid) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Edit_Txid) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOrderBookEntryAsks0 returns the union data inside the OrderBookEntry_Asks_Item as a OrderBookEntryAsks0
func (t OrderBookEntry_Asks_Item) AsOrderBookEntryAsks0() (OrderBookEntryAsks0, error) {
	var body OrderBookEntryAsks0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrderBookEntryAsks0 overwrites any union data inside the OrderBookEntry_Asks_Item as the provided OrderBookEntryAsks0
func (t *OrderBookEntry_Asks_Item) FromOrderBookEntryAsks0(v OrderBookEntryAsks0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrderBookEntryAsks0 performs a merge with any union data inside the OrderBookEntry_Asks_Item, using the provided OrderBookEntryAsks0
func (t *OrderBookEntry_Asks_Item) MergeOrderBookEntryAsks0(v OrderBookEntryAsks0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOrderBookEntryAsks1 returns the union data inside the OrderBookEntry_Asks_Item as a OrderBookEntryAsks1
func (t OrderBookEntry_Asks_Item) AsOrderBookEntryAsks1() (OrderBookEntryAsks1, error) {
	var body OrderBookEntryAsks1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrderBookEntryAsks1 overwrites any union data inside the OrderBookEntry_Asks_Item as the provided OrderBookEntryAsks1
func (t *OrderBookEntry_Asks_Item) FromOrderBookEntryAsks1(v OrderBookEntryAsks1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrderBookEntryAsks1 performs a merge with any union data inside the OrderBookEntry_Asks_Item, using the provided OrderBookEntryAsks1
func (t *OrderBookEntry_Asks_Item) MergeOrderBookEntryAsks1(v OrderBookEntryAsks1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t OrderBookEntry_Asks_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OrderBookEntry_Asks_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOrderBookEntryBid0 returns the union data inside the OrderBookEntry_Bid_Item as a OrderBookEntryBid0
func (t OrderBookEntry_Bid_Item) AsOrderBookEntryBid0() (OrderBookEntryBid0, error) {
	var body OrderBookEntryBid0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrderBookEntryBid0 overwrites any union data inside the OrderBookEntry_Bid_Item as the provided OrderBookEntryBid0
func (t *OrderBookEntry_Bid_Item) FromOrderBookEntryBid0(v OrderBookEntryBid0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrderBookEntryBid0 performs a merge with any union data inside the OrderBookEntry_Bid_Item, using the provided OrderBookEntryBid0
func (t *OrderBookEntry_Bid_Item) MergeOrderBookEntryBid0(v OrderBookEntryBid0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOrderBookEntryBid1 returns the union data inside the OrderBookEntry_Bid_Item as a OrderBookEntryBid1
func (t OrderBookEntry_Bid_Item) AsOrderBookEntryBid1() (OrderBookEntryBid1, error) {
	var body OrderBookEntryBid1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrderBookEntryBid1 overwrites any union data inside the OrderBookEntry_Bid_Item as the provided OrderBookEntryBid1
func (t *OrderBookEntry_Bid_Item) FromOrderBookEntryBid1(v OrderBookEntryBid1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrderBookEntryBid1 performs a merge with any union data inside the OrderBookEntry_Bid_Item, using the provided OrderBookEntryBid1
func (t *OrderBookEntry_Bid_Item) MergeOrderBookEntryBid1(v OrderBookEntryBid1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t OrderBookEntry_Bid_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OrderBookEntry_Bid_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOpen returns the union data inside the Query2_Result_AdditionalProperties as a Open
func (t Query2_Result_AdditionalProperties) AsOpen() (Open, error) {
	var body Open
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpen overwrites any union data inside the Query2_Result_AdditionalProperties as the provided Open
func (t *Query2_Result_AdditionalProperties) FromOpen(v Open) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpen performs a merge with any union data inside the Query2_Result_AdditionalProperties, using the provided Open
func (t *Query2_Result_AdditionalProperties) MergeOpen(v Open) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsClosed returns the union data inside the Query2_Result_AdditionalProperties as a Closed
func (t Query2_Result_AdditionalProperties) AsClosed() (Closed, error) {
	var body Closed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClosed overwrites any union data inside the Query2_Result_AdditionalProperties as the provided Closed
func (t *Query2_Result_AdditionalProperties) FromClosed(v Closed) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClosed performs a merge with any union data inside the Query2_Result_AdditionalProperties, using the provided Closed
func (t *Query2_Result_AdditionalProperties) MergeClosed(v Closed) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Query2_Result_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Query2_Result_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSpread0 returns the union data inside the Spread_Item as a Spread0
func (t Spread_Item) AsSpread0() (Spread0, error) {
	var body Spread0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSpread0 overwrites any union data inside the Spread_Item as the provided Spread0
func (t *Spread_Item) FromSpread0(v Spread0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSpread0 performs a merge with any union data inside the Spread_Item, using the provided Spread0
func (t *Spread_Item) MergeSpread0(v Spread0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsSpread1 returns the union data inside the Spread_Item as a Spread1
func (t Spread_Item) AsSpread1() (Spread1, error) {
	var body Spread1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSpread1 overwrites any union data inside the Spread_Item as the provided Spread1
func (t *Spread_Item) FromSpread1(v Spread1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSpread1 performs a merge with any union data inside the Spread_Item, using the provided Spread1
func (t *Spread_Item) MergeSpread1(v Spread1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Spread_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Spread_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTickData0 returns the union data inside the TickData_Item as a TickData0
func (t TickData_Item) AsTickData0() (TickData0, error) {
	var body TickData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTickData0 overwrites any union data inside the TickData_Item as the provided TickData0
func (t *TickData_Item) FromTickData0(v TickData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTickData0 performs a merge with any union data inside the TickData_Item, using the provided TickData0
func (t *TickData_Item) MergeTickData0(v TickData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTickData1 returns the union data inside the TickData_Item as a TickData1
func (t TickData_Item) AsTickData1() (TickData1, error) {
	var body TickData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTickData1 overwrites any union data inside the TickData_Item as the provided TickData1
func (t *TickData_Item) FromTickData1(v TickData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTickData1 performs a merge with any union data inside the TickData_Item, using the provided TickData1
func (t *TickData_Item) MergeTickData1(v TickData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t TickData_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TickData_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrade0 returns the union data inside the Trade_Item as a Trade0
func (t Trade_Item) AsTrade0() (Trade0, error) {
	var body Trade0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrade0 overwrites any union data inside the Trade_Item as the provided Trade0
func (t *Trade_Item) FromTrade0(v Trade0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrade0 performs a merge with any union data inside the Trade_Item, using the provided Trade0
func (t *Trade_Item) MergeTrade0(v Trade0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTrade1 returns the union data inside the Trade_Item as a Trade1
func (t Trade_Item) AsTrade1() (Trade1, error) {
	var body Trade1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrade1 overwrites any union data inside the Trade_Item as the provided Trade1
func (t *Trade_Item) FromTrade1(v Trade1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrade1 performs a merge with any union data inside the Trade_Item, using the provided Trade1
func (t *Trade_Item) MergeTrade1(v Trade1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Trade_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Trade_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddExport request with any body
	AddExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddExportWithFormdataBody(ctx context.Context, body AddExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrder request with any body
	AddOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrderWithFormdataBody(ctx context.Context, body AddOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrderBatch request with any body
	AddOrderBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrderBatchWithFormdataBody(ctx context.Context, body AddOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountBalance request with any body
	GetAccountBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAccountBalanceWithFormdataBody(ctx context.Context, body GetAccountBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAllOrders request with any body
	CancelAllOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAllOrdersWithFormdataBody(ctx context.Context, body CancelAllOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAllOrdersAfter request with any body
	CancelAllOrdersAfterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAllOrdersAfterWithFormdataBody(ctx context.Context, body CancelAllOrdersAfterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelOrder request with any body
	CancelOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelOrderWithFormdataBody(ctx context.Context, body CancelOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelOrderBatch request with any body
	CancelOrderBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelOrderBatchWithFormdataBody(ctx context.Context, body CancelOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClosedOrders request with any body
	GetClosedOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetClosedOrdersWithFormdataBody(ctx context.Context, body GetClosedOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDepositAddresses request with any body
	GetDepositAddressesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDepositAddressesWithFormdataBody(ctx context.Context, body GetDepositAddressesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDepositMethods request with any body
	GetDepositMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDepositMethodsWithFormdataBody(ctx context.Context, body GetDepositMethodsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusRecentDeposits request with any body
	GetStatusRecentDepositsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStatusRecentDepositsWithFormdataBody(ctx context.Context, body GetStatusRecentDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditOrder request with any body
	EditOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditOrderWithFormdataBody(ctx context.Context, body EditOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportStatus request with any body
	ExportStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExportStatusWithFormdataBody(ctx context.Context, body ExportStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebsocketsToken request with any body
	GetWebsocketsTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWebsocketsTokenWithFormdataBody(ctx context.Context, body GetWebsocketsTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLedgers request with any body
	GetLedgersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLedgersWithFormdataBody(ctx context.Context, body GetLedgersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenOrders request with any body
	GetOpenOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOpenOrdersWithFormdataBody(ctx context.Context, body GetOpenOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenPositions request with any body
	GetOpenPositionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOpenPositionsWithFormdataBody(ctx context.Context, body GetOpenPositionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLedgersInfo request with any body
	GetLedgersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLedgersInfoWithFormdataBody(ctx context.Context, body GetLedgersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersInfo request with any body
	GetOrdersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOrdersInfoWithFormdataBody(ctx context.Context, body GetOrdersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTradesInfo request with any body
	GetTradesInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTradesInfoWithFormdataBody(ctx context.Context, body GetTradesInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveExport request with any body
	RemoveExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveExportWithFormdataBody(ctx context.Context, body RemoveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveExport request with any body
	RetrieveExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrieveExportWithFormdataBody(ctx context.Context, body RetrieveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Stake request with any body
	StakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StakeWithFormdataBody(ctx context.Context, body StakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStakingAssetInfo request with any body
	GetStakingAssetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStakingAssetInfoWithFormdataBody(ctx context.Context, body GetStakingAssetInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStakingPendingDeposits request with any body
	GetStakingPendingDepositsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStakingPendingDepositsWithFormdataBody(ctx context.Context, body GetStakingPendingDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStakingTransactions request with any body
	GetStakingTransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStakingTransactionsWithFormdataBody(ctx context.Context, body GetStakingTransactionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTradeBalance request with any body
	GetTradeBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTradeBalanceWithFormdataBody(ctx context.Context, body GetTradeBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTradeVolume request with any body
	GetTradeVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTradeVolumeWithFormdataBody(ctx context.Context, body GetTradeVolumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTradeHistory request with any body
	GetTradeHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTradeHistoryWithFormdataBody(ctx context.Context, body GetTradeHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unstake request with any body
	UnstakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnstakeWithFormdataBody(ctx context.Context, body UnstakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WalletTransfer request with any body
	WalletTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WalletTransferWithFormdataBody(ctx context.Context, body WalletTransferFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WithdrawFunds request with any body
	WithdrawFundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WithdrawFundsWithFormdataBody(ctx context.Context, body WithdrawFundsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelWithdrawal request with any body
	CancelWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelWithdrawalWithFormdataBody(ctx context.Context, body CancelWithdrawalFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithdrawalInformation request with any body
	GetWithdrawalInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWithdrawalInformationWithFormdataBody(ctx context.Context, body GetWithdrawalInformationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusRecentWithdrawals request with any body
	GetStatusRecentWithdrawalsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStatusRecentWithdrawalsWithFormdataBody(ctx context.Context, body GetStatusRecentWithdrawalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTradableAssetPairs request
	GetTradableAssetPairs(ctx context.Context, params *GetTradableAssetPairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetInfo request
	GetAssetInfo(ctx context.Context, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderBook request
	GetOrderBook(ctx context.Context, params *GetOrderBookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOHLCData request
	GetOHLCData(ctx context.Context, params *GetOHLCDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecentSpreads request
	GetRecentSpreads(ctx context.Context, params *GetRecentSpreadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemStatus request
	GetSystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTickerInformation request
	GetTickerInformation(ctx context.Context, params *GetTickerInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerTime request
	GetServerTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecentTrades request
	GetRecentTrades(ctx context.Context, params *GetRecentTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddExportWithFormdataBody(ctx context.Context, body AddExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrderWithFormdataBody(ctx context.Context, body AddOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrderRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrderBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrderBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrderBatchWithFormdataBody(ctx context.Context, body AddOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrderBatchRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountBalanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountBalanceWithFormdataBody(ctx context.Context, body GetAccountBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountBalanceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAllOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAllOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAllOrdersWithFormdataBody(ctx context.Context, body CancelAllOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAllOrdersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAllOrdersAfterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAllOrdersAfterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAllOrdersAfterWithFormdataBody(ctx context.Context, body CancelAllOrdersAfterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAllOrdersAfterRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelOrderWithFormdataBody(ctx context.Context, body CancelOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelOrderRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelOrderBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelOrderBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelOrderBatchWithFormdataBody(ctx context.Context, body CancelOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelOrderBatchRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClosedOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClosedOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClosedOrdersWithFormdataBody(ctx context.Context, body GetClosedOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClosedOrdersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepositAddressesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepositAddressesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepositAddressesWithFormdataBody(ctx context.Context, body GetDepositAddressesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepositAddressesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepositMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepositMethodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepositMethodsWithFormdataBody(ctx context.Context, body GetDepositMethodsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepositMethodsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusRecentDepositsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRecentDepositsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusRecentDepositsWithFormdataBody(ctx context.Context, body GetStatusRecentDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRecentDepositsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditOrderWithFormdataBody(ctx context.Context, body EditOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditOrderRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportStatusWithFormdataBody(ctx context.Context, body ExportStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportStatusRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebsocketsTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebsocketsTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebsocketsTokenWithFormdataBody(ctx context.Context, body GetWebsocketsTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebsocketsTokenRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLedgersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLedgersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLedgersWithFormdataBody(ctx context.Context, body GetLedgersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLedgersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenOrdersWithFormdataBody(ctx context.Context, body GetOpenOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenOrdersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenPositionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenPositionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenPositionsWithFormdataBody(ctx context.Context, body GetOpenPositionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenPositionsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLedgersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLedgersInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLedgersInfoWithFormdataBody(ctx context.Context, body GetLedgersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLedgersInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersInfoWithFormdataBody(ctx context.Context, body GetOrdersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradesInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradesInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradesInfoWithFormdataBody(ctx context.Context, body GetTradesInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradesInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveExportWithFormdataBody(ctx context.Context, body RemoveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveExportWithFormdataBody(ctx context.Context, body RetrieveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStakeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StakeWithFormdataBody(ctx context.Context, body StakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStakeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingAssetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingAssetInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingAssetInfoWithFormdataBody(ctx context.Context, body GetStakingAssetInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingAssetInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingPendingDepositsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingPendingDepositsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingPendingDepositsWithFormdataBody(ctx context.Context, body GetStakingPendingDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingPendingDepositsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingTransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingTransactionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStakingTransactionsWithFormdataBody(ctx context.Context, body GetStakingTransactionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStakingTransactionsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeBalanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeBalanceWithFormdataBody(ctx context.Context, body GetTradeBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeBalanceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeVolumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeVolumeWithFormdataBody(ctx context.Context, body GetTradeVolumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeVolumeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradeHistoryWithFormdataBody(ctx context.Context, body GetTradeHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradeHistoryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnstakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnstakeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnstakeWithFormdataBody(ctx context.Context, body UnstakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnstakeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WalletTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWalletTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WalletTransferWithFormdataBody(ctx context.Context, body WalletTransferFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWalletTransferRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WithdrawFundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWithdrawFundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WithdrawFundsWithFormdataBody(ctx context.Context, body WithdrawFundsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWithdrawFundsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelWithdrawalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelWithdrawalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelWithdrawalWithFormdataBody(ctx context.Context, body CancelWithdrawalFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelWithdrawalRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithdrawalInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithdrawalInformationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithdrawalInformationWithFormdataBody(ctx context.Context, body GetWithdrawalInformationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithdrawalInformationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusRecentWithdrawalsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRecentWithdrawalsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusRecentWithdrawalsWithFormdataBody(ctx context.Context, body GetStatusRecentWithdrawalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRecentWithdrawalsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTradableAssetPairs(ctx context.Context, params *GetTradableAssetPairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTradableAssetPairsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetInfo(ctx context.Context, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderBook(ctx context.Context, params *GetOrderBookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderBookRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOHLCData(ctx context.Context, params *GetOHLCDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOHLCDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecentSpreads(ctx context.Context, params *GetRecentSpreadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecentSpreadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTickerInformation(ctx context.Context, params *GetTickerInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTickerInformationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerTimeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecentTrades(ctx context.Context, params *GetRecentTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecentTradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddExportRequestWithFormdataBody calls the generic AddExport builder with application/x-www-form-urlencoded body
func NewAddExportRequestWithFormdataBody(server string, body AddExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAddExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAddExportRequestWithBody generates requests for AddExport with any type of body
func NewAddExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/AddExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddOrderRequestWithFormdataBody calls the generic AddOrder builder with application/x-www-form-urlencoded body
func NewAddOrderRequestWithFormdataBody(server string, body AddOrderFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAddOrderRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAddOrderRequestWithBody generates requests for AddOrder with any type of body
func NewAddOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/AddOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddOrderBatchRequestWithFormdataBody calls the generic AddOrderBatch builder with application/x-www-form-urlencoded body
func NewAddOrderBatchRequestWithFormdataBody(server string, body AddOrderBatchFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAddOrderBatchRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAddOrderBatchRequestWithBody generates requests for AddOrderBatch with any type of body
func NewAddOrderBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/AddOrderBatch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountBalanceRequestWithFormdataBody calls the generic GetAccountBalance builder with application/x-www-form-urlencoded body
func NewGetAccountBalanceRequestWithFormdataBody(server string, body GetAccountBalanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetAccountBalanceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetAccountBalanceRequestWithBody generates requests for GetAccountBalance with any type of body
func NewGetAccountBalanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelAllOrdersRequestWithFormdataBody calls the generic CancelAllOrders builder with application/x-www-form-urlencoded body
func NewCancelAllOrdersRequestWithFormdataBody(server string, body CancelAllOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCancelAllOrdersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCancelAllOrdersRequestWithBody generates requests for CancelAllOrders with any type of body
func NewCancelAllOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/CancelAll")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelAllOrdersAfterRequestWithFormdataBody calls the generic CancelAllOrdersAfter builder with application/x-www-form-urlencoded body
func NewCancelAllOrdersAfterRequestWithFormdataBody(server string, body CancelAllOrdersAfterFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCancelAllOrdersAfterRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCancelAllOrdersAfterRequestWithBody generates requests for CancelAllOrdersAfter with any type of body
func NewCancelAllOrdersAfterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/CancelAllOrdersAfter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelOrderRequestWithFormdataBody calls the generic CancelOrder builder with application/x-www-form-urlencoded body
func NewCancelOrderRequestWithFormdataBody(server string, body CancelOrderFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCancelOrderRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCancelOrderRequestWithBody generates requests for CancelOrder with any type of body
func NewCancelOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/CancelOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelOrderBatchRequestWithFormdataBody calls the generic CancelOrderBatch builder with application/x-www-form-urlencoded body
func NewCancelOrderBatchRequestWithFormdataBody(server string, body CancelOrderBatchFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCancelOrderBatchRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCancelOrderBatchRequestWithBody generates requests for CancelOrderBatch with any type of body
func NewCancelOrderBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/CancelOrderBatch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClosedOrdersRequestWithFormdataBody calls the generic GetClosedOrders builder with application/x-www-form-urlencoded body
func NewGetClosedOrdersRequestWithFormdataBody(server string, body GetClosedOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetClosedOrdersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetClosedOrdersRequestWithBody generates requests for GetClosedOrders with any type of body
func NewGetClosedOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/ClosedOrders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDepositAddressesRequestWithFormdataBody calls the generic GetDepositAddresses builder with application/x-www-form-urlencoded body
func NewGetDepositAddressesRequestWithFormdataBody(server string, body GetDepositAddressesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetDepositAddressesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetDepositAddressesRequestWithBody generates requests for GetDepositAddresses with any type of body
func NewGetDepositAddressesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/DepositAddresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDepositMethodsRequestWithFormdataBody calls the generic GetDepositMethods builder with application/x-www-form-urlencoded body
func NewGetDepositMethodsRequestWithFormdataBody(server string, body GetDepositMethodsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetDepositMethodsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetDepositMethodsRequestWithBody generates requests for GetDepositMethods with any type of body
func NewGetDepositMethodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/DepositMethods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRecentDepositsRequestWithFormdataBody calls the generic GetStatusRecentDeposits builder with application/x-www-form-urlencoded body
func NewGetStatusRecentDepositsRequestWithFormdataBody(server string, body GetStatusRecentDepositsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetStatusRecentDepositsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetStatusRecentDepositsRequestWithBody generates requests for GetStatusRecentDeposits with any type of body
func NewGetStatusRecentDepositsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/DepositStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditOrderRequestWithFormdataBody calls the generic EditOrder builder with application/x-www-form-urlencoded body
func NewEditOrderRequestWithFormdataBody(server string, body EditOrderFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEditOrderRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEditOrderRequestWithBody generates requests for EditOrder with any type of body
func NewEditOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/EditOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExportStatusRequestWithFormdataBody calls the generic ExportStatus builder with application/x-www-form-urlencoded body
func NewExportStatusRequestWithFormdataBody(server string, body ExportStatusFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewExportStatusRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewExportStatusRequestWithBody generates requests for ExportStatus with any type of body
func NewExportStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/ExportStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebsocketsTokenRequestWithFormdataBody calls the generic GetWebsocketsToken builder with application/x-www-form-urlencoded body
func NewGetWebsocketsTokenRequestWithFormdataBody(server string, body GetWebsocketsTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetWebsocketsTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetWebsocketsTokenRequestWithBody generates requests for GetWebsocketsToken with any type of body
func NewGetWebsocketsTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/GetWebSocketsToken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLedgersRequestWithFormdataBody calls the generic GetLedgers builder with application/x-www-form-urlencoded body
func NewGetLedgersRequestWithFormdataBody(server string, body GetLedgersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetLedgersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetLedgersRequestWithBody generates requests for GetLedgers with any type of body
func NewGetLedgersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Ledgers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenOrdersRequestWithFormdataBody calls the generic GetOpenOrders builder with application/x-www-form-urlencoded body
func NewGetOpenOrdersRequestWithFormdataBody(server string, body GetOpenOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetOpenOrdersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetOpenOrdersRequestWithBody generates requests for GetOpenOrders with any type of body
func NewGetOpenOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/OpenOrders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenPositionsRequestWithFormdataBody calls the generic GetOpenPositions builder with application/x-www-form-urlencoded body
func NewGetOpenPositionsRequestWithFormdataBody(server string, body GetOpenPositionsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetOpenPositionsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetOpenPositionsRequestWithBody generates requests for GetOpenPositions with any type of body
func NewGetOpenPositionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/OpenPositions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLedgersInfoRequestWithFormdataBody calls the generic GetLedgersInfo builder with application/x-www-form-urlencoded body
func NewGetLedgersInfoRequestWithFormdataBody(server string, body GetLedgersInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetLedgersInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetLedgersInfoRequestWithBody generates requests for GetLedgersInfo with any type of body
func NewGetLedgersInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/QueryLedgers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrdersInfoRequestWithFormdataBody calls the generic GetOrdersInfo builder with application/x-www-form-urlencoded body
func NewGetOrdersInfoRequestWithFormdataBody(server string, body GetOrdersInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetOrdersInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetOrdersInfoRequestWithBody generates requests for GetOrdersInfo with any type of body
func NewGetOrdersInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/QueryOrders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTradesInfoRequestWithFormdataBody calls the generic GetTradesInfo builder with application/x-www-form-urlencoded body
func NewGetTradesInfoRequestWithFormdataBody(server string, body GetTradesInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetTradesInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetTradesInfoRequestWithBody generates requests for GetTradesInfo with any type of body
func NewGetTradesInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/QueryTrades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveExportRequestWithFormdataBody calls the generic RemoveExport builder with application/x-www-form-urlencoded body
func NewRemoveExportRequestWithFormdataBody(server string, body RemoveExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRemoveExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRemoveExportRequestWithBody generates requests for RemoveExport with any type of body
func NewRemoveExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/RemoveExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveExportRequestWithFormdataBody calls the generic RetrieveExport builder with application/x-www-form-urlencoded body
func NewRetrieveExportRequestWithFormdataBody(server string, body RetrieveExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRetrieveExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRetrieveExportRequestWithBody generates requests for RetrieveExport with any type of body
func NewRetrieveExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/RetrieveExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStakeRequestWithFormdataBody calls the generic Stake builder with application/x-www-form-urlencoded body
func NewStakeRequestWithFormdataBody(server string, body StakeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStakeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewStakeRequestWithBody generates requests for Stake with any type of body
func NewStakeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Stake")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStakingAssetInfoRequestWithFormdataBody calls the generic GetStakingAssetInfo builder with application/x-www-form-urlencoded body
func NewGetStakingAssetInfoRequestWithFormdataBody(server string, body GetStakingAssetInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetStakingAssetInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetStakingAssetInfoRequestWithBody generates requests for GetStakingAssetInfo with any type of body
func NewGetStakingAssetInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Staking/Assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStakingPendingDepositsRequestWithFormdataBody calls the generic GetStakingPendingDeposits builder with application/x-www-form-urlencoded body
func NewGetStakingPendingDepositsRequestWithFormdataBody(server string, body GetStakingPendingDepositsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetStakingPendingDepositsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetStakingPendingDepositsRequestWithBody generates requests for GetStakingPendingDeposits with any type of body
func NewGetStakingPendingDepositsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Staking/Pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStakingTransactionsRequestWithFormdataBody calls the generic GetStakingTransactions builder with application/x-www-form-urlencoded body
func NewGetStakingTransactionsRequestWithFormdataBody(server string, body GetStakingTransactionsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetStakingTransactionsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetStakingTransactionsRequestWithBody generates requests for GetStakingTransactions with any type of body
func NewGetStakingTransactionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Staking/Transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTradeBalanceRequestWithFormdataBody calls the generic GetTradeBalance builder with application/x-www-form-urlencoded body
func NewGetTradeBalanceRequestWithFormdataBody(server string, body GetTradeBalanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetTradeBalanceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetTradeBalanceRequestWithBody generates requests for GetTradeBalance with any type of body
func NewGetTradeBalanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/TradeBalance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTradeVolumeRequestWithFormdataBody calls the generic GetTradeVolume builder with application/x-www-form-urlencoded body
func NewGetTradeVolumeRequestWithFormdataBody(server string, body GetTradeVolumeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetTradeVolumeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetTradeVolumeRequestWithBody generates requests for GetTradeVolume with any type of body
func NewGetTradeVolumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/TradeVolume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTradeHistoryRequestWithFormdataBody calls the generic GetTradeHistory builder with application/x-www-form-urlencoded body
func NewGetTradeHistoryRequestWithFormdataBody(server string, body GetTradeHistoryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetTradeHistoryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetTradeHistoryRequestWithBody generates requests for GetTradeHistory with any type of body
func NewGetTradeHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/TradesHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnstakeRequestWithFormdataBody calls the generic Unstake builder with application/x-www-form-urlencoded body
func NewUnstakeRequestWithFormdataBody(server string, body UnstakeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUnstakeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUnstakeRequestWithBody generates requests for Unstake with any type of body
func NewUnstakeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Unstake")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWalletTransferRequestWithFormdataBody calls the generic WalletTransfer builder with application/x-www-form-urlencoded body
func NewWalletTransferRequestWithFormdataBody(server string, body WalletTransferFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWalletTransferRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWalletTransferRequestWithBody generates requests for WalletTransfer with any type of body
func NewWalletTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/WalletTransfer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWithdrawFundsRequestWithFormdataBody calls the generic WithdrawFunds builder with application/x-www-form-urlencoded body
func NewWithdrawFundsRequestWithFormdataBody(server string, body WithdrawFundsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWithdrawFundsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWithdrawFundsRequestWithBody generates requests for WithdrawFunds with any type of body
func NewWithdrawFundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/Withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelWithdrawalRequestWithFormdataBody calls the generic CancelWithdrawal builder with application/x-www-form-urlencoded body
func NewCancelWithdrawalRequestWithFormdataBody(server string, body CancelWithdrawalFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCancelWithdrawalRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCancelWithdrawalRequestWithBody generates requests for CancelWithdrawal with any type of body
func NewCancelWithdrawalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/WithdrawCancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWithdrawalInformationRequestWithFormdataBody calls the generic GetWithdrawalInformation builder with application/x-www-form-urlencoded body
func NewGetWithdrawalInformationRequestWithFormdataBody(server string, body GetWithdrawalInformationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetWithdrawalInformationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetWithdrawalInformationRequestWithBody generates requests for GetWithdrawalInformation with any type of body
func NewGetWithdrawalInformationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/WithdrawInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRecentWithdrawalsRequestWithFormdataBody calls the generic GetStatusRecentWithdrawals builder with application/x-www-form-urlencoded body
func NewGetStatusRecentWithdrawalsRequestWithFormdataBody(server string, body GetStatusRecentWithdrawalsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetStatusRecentWithdrawalsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetStatusRecentWithdrawalsRequestWithBody generates requests for GetStatusRecentWithdrawals with any type of body
func NewGetStatusRecentWithdrawalsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/WithdrawStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTradableAssetPairsRequest generates requests for GetTradableAssetPairs
func NewGetTradableAssetPairsRequest(server string, params *GetTradableAssetPairsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/AssetPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, *params.Pair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Info != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "info", runtime.ParamLocationQuery, *params.Info); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetInfoRequest generates requests for GetAssetInfo
func NewGetAssetInfoRequest(server string, params *GetAssetInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Asset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asset", runtime.ParamLocationQuery, *params.Asset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Aclass != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aclass", runtime.ParamLocationQuery, *params.Aclass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderBookRequest generates requests for GetOrderBook
func NewGetOrderBookRequest(server string, params *GetOrderBookParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Depth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOHLCDataRequest generates requests for GetOHLCData
func NewGetOHLCDataRequest(server string, params *GetOHLCDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/OHLC")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Interval != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecentSpreadsRequest generates requests for GetRecentSpreads
func NewGetRecentSpreadsRequest(server string, params *GetRecentSpreadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Spread")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemStatusRequest generates requests for GetSystemStatus
func NewGetSystemStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/SystemStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTickerInformationRequest generates requests for GetTickerInformation
func NewGetTickerInformationRequest(server string, params *GetTickerInformationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Ticker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, *params.Pair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerTimeRequest generates requests for GetServerTime
func NewGetServerTimeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecentTradesRequest generates requests for GetRecentTrades
func NewGetRecentTradesRequest(server string, params *GetRecentTradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/Trades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddExport request with any body
	AddExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddExportResponse, error)

	AddExportWithFormdataBodyWithResponse(ctx context.Context, body AddExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddExportResponse, error)

	// AddOrder request with any body
	AddOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrderResponse, error)

	AddOrderWithFormdataBodyWithResponse(ctx context.Context, body AddOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddOrderResponse, error)

	// AddOrderBatch request with any body
	AddOrderBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrderBatchResponse, error)

	AddOrderBatchWithFormdataBodyWithResponse(ctx context.Context, body AddOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddOrderBatchResponse, error)

	// GetAccountBalance request with any body
	GetAccountBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error)

	GetAccountBalanceWithFormdataBodyWithResponse(ctx context.Context, body GetAccountBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error)

	// CancelAllOrders request with any body
	CancelAllOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAllOrdersResponse, error)

	CancelAllOrdersWithFormdataBodyWithResponse(ctx context.Context, body CancelAllOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelAllOrdersResponse, error)

	// CancelAllOrdersAfter request with any body
	CancelAllOrdersAfterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAllOrdersAfterResponse, error)

	CancelAllOrdersAfterWithFormdataBodyWithResponse(ctx context.Context, body CancelAllOrdersAfterFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelAllOrdersAfterResponse, error)

	// CancelOrder request with any body
	CancelOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error)

	CancelOrderWithFormdataBodyWithResponse(ctx context.Context, body CancelOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error)

	// CancelOrderBatch request with any body
	CancelOrderBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelOrderBatchResponse, error)

	CancelOrderBatchWithFormdataBodyWithResponse(ctx context.Context, body CancelOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelOrderBatchResponse, error)

	// GetClosedOrders request with any body
	GetClosedOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClosedOrdersResponse, error)

	GetClosedOrdersWithFormdataBodyWithResponse(ctx context.Context, body GetClosedOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetClosedOrdersResponse, error)

	// GetDepositAddresses request with any body
	GetDepositAddressesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDepositAddressesResponse, error)

	GetDepositAddressesWithFormdataBodyWithResponse(ctx context.Context, body GetDepositAddressesFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetDepositAddressesResponse, error)

	// GetDepositMethods request with any body
	GetDepositMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDepositMethodsResponse, error)

	GetDepositMethodsWithFormdataBodyWithResponse(ctx context.Context, body GetDepositMethodsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetDepositMethodsResponse, error)

	// GetStatusRecentDeposits request with any body
	GetStatusRecentDepositsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatusRecentDepositsResponse, error)

	GetStatusRecentDepositsWithFormdataBodyWithResponse(ctx context.Context, body GetStatusRecentDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStatusRecentDepositsResponse, error)

	// EditOrder request with any body
	EditOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditOrderResponse, error)

	EditOrderWithFormdataBodyWithResponse(ctx context.Context, body EditOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*EditOrderResponse, error)

	// ExportStatus request with any body
	ExportStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportStatusResponse, error)

	ExportStatusWithFormdataBodyWithResponse(ctx context.Context, body ExportStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*ExportStatusResponse, error)

	// GetWebsocketsToken request with any body
	GetWebsocketsTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWebsocketsTokenResponse, error)

	GetWebsocketsTokenWithFormdataBodyWithResponse(ctx context.Context, body GetWebsocketsTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetWebsocketsTokenResponse, error)

	// GetLedgers request with any body
	GetLedgersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLedgersResponse, error)

	GetLedgersWithFormdataBodyWithResponse(ctx context.Context, body GetLedgersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetLedgersResponse, error)

	// GetOpenOrders request with any body
	GetOpenOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOpenOrdersResponse, error)

	GetOpenOrdersWithFormdataBodyWithResponse(ctx context.Context, body GetOpenOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOpenOrdersResponse, error)

	// GetOpenPositions request with any body
	GetOpenPositionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOpenPositionsResponse, error)

	GetOpenPositionsWithFormdataBodyWithResponse(ctx context.Context, body GetOpenPositionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOpenPositionsResponse, error)

	// GetLedgersInfo request with any body
	GetLedgersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLedgersInfoResponse, error)

	GetLedgersInfoWithFormdataBodyWithResponse(ctx context.Context, body GetLedgersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetLedgersInfoResponse, error)

	// GetOrdersInfo request with any body
	GetOrdersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersInfoResponse, error)

	GetOrdersInfoWithFormdataBodyWithResponse(ctx context.Context, body GetOrdersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersInfoResponse, error)

	// GetTradesInfo request with any body
	GetTradesInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradesInfoResponse, error)

	GetTradesInfoWithFormdataBodyWithResponse(ctx context.Context, body GetTradesInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradesInfoResponse, error)

	// RemoveExport request with any body
	RemoveExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveExportResponse, error)

	RemoveExportWithFormdataBodyWithResponse(ctx context.Context, body RemoveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*RemoveExportResponse, error)

	// RetrieveExport request with any body
	RetrieveExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveExportResponse, error)

	RetrieveExportWithFormdataBodyWithResponse(ctx context.Context, body RetrieveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*RetrieveExportResponse, error)

	// Stake request with any body
	StakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StakeResponse, error)

	StakeWithFormdataBodyWithResponse(ctx context.Context, body StakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*StakeResponse, error)

	// GetStakingAssetInfo request with any body
	GetStakingAssetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingAssetInfoResponse, error)

	GetStakingAssetInfoWithFormdataBodyWithResponse(ctx context.Context, body GetStakingAssetInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingAssetInfoResponse, error)

	// GetStakingPendingDeposits request with any body
	GetStakingPendingDepositsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingPendingDepositsResponse, error)

	GetStakingPendingDepositsWithFormdataBodyWithResponse(ctx context.Context, body GetStakingPendingDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingPendingDepositsResponse, error)

	// GetStakingTransactions request with any body
	GetStakingTransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingTransactionsResponse, error)

	GetStakingTransactionsWithFormdataBodyWithResponse(ctx context.Context, body GetStakingTransactionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingTransactionsResponse, error)

	// GetTradeBalance request with any body
	GetTradeBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeBalanceResponse, error)

	GetTradeBalanceWithFormdataBodyWithResponse(ctx context.Context, body GetTradeBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeBalanceResponse, error)

	// GetTradeVolume request with any body
	GetTradeVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeVolumeResponse, error)

	GetTradeVolumeWithFormdataBodyWithResponse(ctx context.Context, body GetTradeVolumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeVolumeResponse, error)

	// GetTradeHistory request with any body
	GetTradeHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeHistoryResponse, error)

	GetTradeHistoryWithFormdataBodyWithResponse(ctx context.Context, body GetTradeHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeHistoryResponse, error)

	// Unstake request with any body
	UnstakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnstakeResponse, error)

	UnstakeWithFormdataBodyWithResponse(ctx context.Context, body UnstakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*UnstakeResponse, error)

	// WalletTransfer request with any body
	WalletTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WalletTransferResponse, error)

	WalletTransferWithFormdataBodyWithResponse(ctx context.Context, body WalletTransferFormdataRequestBody, reqEditors ...RequestEditorFn) (*WalletTransferResponse, error)

	// WithdrawFunds request with any body
	WithdrawFundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WithdrawFundsResponse, error)

	WithdrawFundsWithFormdataBodyWithResponse(ctx context.Context, body WithdrawFundsFormdataRequestBody, reqEditors ...RequestEditorFn) (*WithdrawFundsResponse, error)

	// CancelWithdrawal request with any body
	CancelWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error)

	CancelWithdrawalWithFormdataBodyWithResponse(ctx context.Context, body CancelWithdrawalFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error)

	// GetWithdrawalInformation request with any body
	GetWithdrawalInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWithdrawalInformationResponse, error)

	GetWithdrawalInformationWithFormdataBodyWithResponse(ctx context.Context, body GetWithdrawalInformationFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetWithdrawalInformationResponse, error)

	// GetStatusRecentWithdrawals request with any body
	GetStatusRecentWithdrawalsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatusRecentWithdrawalsResponse, error)

	GetStatusRecentWithdrawalsWithFormdataBodyWithResponse(ctx context.Context, body GetStatusRecentWithdrawalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStatusRecentWithdrawalsResponse, error)

	// GetTradableAssetPairs request
	GetTradableAssetPairsWithResponse(ctx context.Context, params *GetTradableAssetPairsParams, reqEditors ...RequestEditorFn) (*GetTradableAssetPairsResponse, error)

	// GetAssetInfo request
	GetAssetInfoWithResponse(ctx context.Context, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error)

	// GetOrderBook request
	GetOrderBookWithResponse(ctx context.Context, params *GetOrderBookParams, reqEditors ...RequestEditorFn) (*GetOrderBookResponse, error)

	// GetOHLCData request
	GetOHLCDataWithResponse(ctx context.Context, params *GetOHLCDataParams, reqEditors ...RequestEditorFn) (*GetOHLCDataResponse, error)

	// GetRecentSpreads request
	GetRecentSpreadsWithResponse(ctx context.Context, params *GetRecentSpreadsParams, reqEditors ...RequestEditorFn) (*GetRecentSpreadsResponse, error)

	// GetSystemStatus request
	GetSystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStatusResponse, error)

	// GetTickerInformation request
	GetTickerInformationWithResponse(ctx context.Context, params *GetTickerInformationParams, reqEditors ...RequestEditorFn) (*GetTickerInformationResponse, error)

	// GetServerTime request
	GetServerTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerTimeResponse, error)

	// GetRecentTrades request
	GetRecentTradesWithResponse(ctx context.Context, params *GetRecentTradesParams, reqEditors ...RequestEditorFn) (*GetRecentTradesResponse, error)
}

type AddExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Id Report ID
			Id *string `json:"id,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Add2
}

// Status returns HTTPResponse.Status
func (r AddOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrderBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Batchadd2
}

// Status returns HTTPResponse.Status
func (r AddOrderBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrderBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Balance2
}

// Status returns HTTPResponse.Status
func (r GetAccountBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAllOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Count Number of orders that were cancelled
			Count *int `json:"count,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelAllOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAllOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAllOrdersAfterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// CurrentTime Timestamp (RFC3339 format) at which the request was received
			CurrentTime *string `json:"currentTime,omitempty"`

			// TriggerTime Timestamp (RFC3339 format) after which all orders will be cancelled, unless the timer is extended or disabled
			TriggerTime *string `json:"triggerTime,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelAllOrdersAfterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAllOrdersAfterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cancel2
}

// Status returns HTTPResponse.Status
func (r CancelOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelOrderBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Batchcancel2
}

// Status returns HTTPResponse.Status
func (r CancelOrderBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelOrderBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClosedOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Closed2
}

// Status returns HTTPResponse.Status
func (r GetClosedOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClosedOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDepositAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Addresses2
}

// Status returns HTTPResponse.Status
func (r GetDepositAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDepositAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDepositMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Methods2
}

// Status returns HTTPResponse.Status
func (r GetDepositMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDepositMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusRecentDepositsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recent2
}

// Status returns HTTPResponse.Status
func (r GetStatusRecentDepositsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusRecentDepositsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Edit2
}

// Status returns HTTPResponse.Status
func (r EditOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *[]struct {
			Aclass *string `json:"aclass,omitempty"`
			Asset  *string `json:"asset,omitempty"`

			// Completedtm UNIX timestamp report processing finished
			Completedtm *string `json:"completedtm,omitempty"`

			// Createdtm UNIX timestamp of report request
			Createdtm *string `json:"createdtm,omitempty"`

			// Dataendtm UNIX timestamp of the report data end time
			Dataendtm *string `json:"dataendtm,omitempty"`

			// Datastarttm UNIX timestamp of the report data start time
			Datastarttm *string `json:"datastarttm,omitempty"`
			Descr       *string `json:"descr,omitempty"`
			Expiretm    *string `json:"expiretm,omitempty"`
			Fields      *string `json:"fields,omitempty"`
			Flags       *string `json:"flags,omitempty"`
			Format      *string `json:"format,omitempty"`

			// Id Report ID
			Id     *string `json:"id,omitempty"`
			Report *string `json:"report,omitempty"`

			// Starttm UNIX timestamp report processing began
			Starttm *string `json:"starttm,omitempty"`

			// Status Status of the report
			Status  *GetSystemStatusResponseStatus `json:"status,omitempty"`
			Subtype *string           `json:"subtype,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebsocketsTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Expires Time (in seconds) after which the token expires
			Expires *int `json:"expires,omitempty"`

			// Token Websockets token
			Token *string `json:"token,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWebsocketsTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebsocketsTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLedgersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Info3
}

// Status returns HTTPResponse.Status
func (r GetLedgersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLedgersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Open2
}

// Status returns HTTPResponse.Status
func (r GetOpenOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *map[string]struct {
			// Cost Opening cost of position (in quote currency)
			Cost *string `json:"cost,omitempty"`

			// Fee Opening fee of position (in quote currency)
			Fee *string `json:"fee,omitempty"`

			// Margin Initial margin consumed (in quote currency)
			Margin *string `json:"margin,omitempty"`

			// Misc Comma delimited list of add'l info
			Misc *string `json:"misc,omitempty"`

			// Net Unrealised P&L of remaining position (if `docalcs` requested)
			Net *string `json:"net,omitempty"`

			// Oflags Comma delimited list of opening order flags
			Oflags *string `json:"oflags,omitempty"`

			// Ordertxid Order ID responsible for the position
			Ordertxid *string `json:"ordertxid,omitempty"`

			// Ordertype Order type used to open position
			Ordertype *string `json:"ordertype,omitempty"`

			// Pair Asset pair
			Pair *string `json:"pair,omitempty"`

			// Posstatus Position status
			Posstatus *string `json:"posstatus,omitempty"`

			// Rollovertm Timestamp of next margin rollover fee
			Rollovertm *string `json:"rollovertm,omitempty"`

			// Terms Funding cost and term of position
			Terms *string `json:"terms,omitempty"`

			// Time Unix timestamp of trade
			Time *float32 `json:"time,omitempty"`

			// Type Direction (buy/sell) of position
			Type *string `json:"type,omitempty"`

			// Value Current value of remaining position (if `docalcs` requested)
			Value *string `json:"value,omitempty"`

			// Vol Position opening size (in base currency)
			Vol *string `json:"vol,omitempty"`

			// VolClosed Quantity closed (in base currency)
			VolClosed *string `json:"vol_closed,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOpenPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLedgersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Query3
}

// Status returns HTTPResponse.Status
func (r GetLedgersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLedgersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Query2
}

// Status returns HTTPResponse.Status
func (r GetOrdersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTradesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *[]Error `json:"error,omitempty"`

		// Result Trade info
		Result *map[string]Trade2 `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTradesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTradesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Cancel Whether cancellation was successful
			Cancel *bool `json:"cancel,omitempty"`

			// Delete Whether deletion was successful
			Delete *bool `json:"delete,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RetrieveExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StakeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Refid Reference ID
			Refid *string `json:"refid,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r StakeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StakeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStakingAssetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error       `json:"error,omitempty"`
		Result *[]testAsset `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStakingAssetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStakingAssetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStakingPendingDepositsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error         `json:"error,omitempty"`
		Result *[]Transaction `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStakingPendingDepositsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStakingPendingDepositsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStakingTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error         `json:"error,omitempty"`
		Result *[]Transaction `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStakingTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStakingTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTradeBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Balance4
}

// Status returns HTTPResponse.Status
func (r GetTradeBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTradeBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTradeVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Volume
}

// Status returns HTTPResponse.Status
func (r GetTradeVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTradeVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTradeHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *History2
}

// Status returns HTTPResponse.Status
func (r GetTradeHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTradeHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnstakeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Refid Reference ID
			Refid *string `json:"refid,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UnstakeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnstakeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WalletTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Refid Reference ID
			Refid *string `json:"refid,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r WalletTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WalletTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WithdrawFundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Withdrawal2
}

// Status returns HTTPResponse.Status
func (r WithdrawFundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WithdrawFundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *Error `json:"error,omitempty"`

		// Result Whether cancellation was successful or not.
		Result *bool `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CancelWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithdrawalInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Info5
}

// Status returns HTTPResponse.Status
func (r GetWithdrawalInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithdrawalInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusRecentWithdrawalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recent4
}

// Status returns HTTPResponse.Status
func (r GetStatusRecentWithdrawalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusRecentWithdrawalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTradableAssetPairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *Error `json:"error,omitempty"`

		// Result Pair names and their info
		Result *map[string]Pairs `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTradableAssetPairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTradableAssetPairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Info2
}

// Status returns HTTPResponse.Status
func (r GetAssetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Depth
}

// Status returns HTTPResponse.Status
func (r GetOrderBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOHLCDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ohlc
}

// Status returns HTTPResponse.Status
func (r GetOHLCDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOHLCDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecentSpreadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Spread2
}

// Status returns HTTPResponse.Status
func (r GetRecentSpreadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecentSpreadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error  *Error `json:"error,omitempty"`
		Result *struct {
			// Status Current system status:
			// * `online`  Kraken is operating normally. All order types may be submitted and trades can occur.
			// * `maintenance`  The exchange is offline. No new orders or cancellations may be submitted.
			// * `cancel_only`  Resting (open) orders can be cancelled but no new orders may be submitted. No trades will occur.
			// * `post_only`  Only post-only limit orders can be submitted. Existing orders may still be cancelled. No trades will occur.
			Status *GetSystemStatusResponseStatus `json:"status,omitempty"`

			// Timestamp Current timestamp (RFC3339)
			Timestamp *string `json:"timestamp,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTickerInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticker2
}

// Status returns HTTPResponse.Status
func (r GetTickerInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTickerInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Time
}

// Status returns HTTPResponse.Status
func (r GetServerTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecentTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r GetRecentTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecentTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddExportWithBodyWithResponse request with arbitrary body returning *AddExportResponse
func (c *ClientWithResponses) AddExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddExportResponse, error) {
	rsp, err := c.AddExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddExportResponse(rsp)
}

func (c *ClientWithResponses) AddExportWithFormdataBodyWithResponse(ctx context.Context, body AddExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddExportResponse, error) {
	rsp, err := c.AddExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddExportResponse(rsp)
}

// AddOrderWithBodyWithResponse request with arbitrary body returning *AddOrderResponse
func (c *ClientWithResponses) AddOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrderResponse, error) {
	rsp, err := c.AddOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrderResponse(rsp)
}

func (c *ClientWithResponses) AddOrderWithFormdataBodyWithResponse(ctx context.Context, body AddOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddOrderResponse, error) {
	rsp, err := c.AddOrderWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrderResponse(rsp)
}

// AddOrderBatchWithBodyWithResponse request with arbitrary body returning *AddOrderBatchResponse
func (c *ClientWithResponses) AddOrderBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrderBatchResponse, error) {
	rsp, err := c.AddOrderBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrderBatchResponse(rsp)
}

func (c *ClientWithResponses) AddOrderBatchWithFormdataBodyWithResponse(ctx context.Context, body AddOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddOrderBatchResponse, error) {
	rsp, err := c.AddOrderBatchWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrderBatchResponse(rsp)
}

// GetAccountBalanceWithBodyWithResponse request with arbitrary body returning *GetAccountBalanceResponse
func (c *ClientWithResponses) GetAccountBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error) {
	rsp, err := c.GetAccountBalanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBalanceResponse(rsp)
}

func (c *ClientWithResponses) GetAccountBalanceWithFormdataBodyWithResponse(ctx context.Context, body GetAccountBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error) {
	rsp, err := c.GetAccountBalanceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBalanceResponse(rsp)
}

// CancelAllOrdersWithBodyWithResponse request with arbitrary body returning *CancelAllOrdersResponse
func (c *ClientWithResponses) CancelAllOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAllOrdersResponse, error) {
	rsp, err := c.CancelAllOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAllOrdersResponse(rsp)
}

func (c *ClientWithResponses) CancelAllOrdersWithFormdataBodyWithResponse(ctx context.Context, body CancelAllOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelAllOrdersResponse, error) {
	rsp, err := c.CancelAllOrdersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAllOrdersResponse(rsp)
}

// CancelAllOrdersAfterWithBodyWithResponse request with arbitrary body returning *CancelAllOrdersAfterResponse
func (c *ClientWithResponses) CancelAllOrdersAfterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAllOrdersAfterResponse, error) {
	rsp, err := c.CancelAllOrdersAfterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAllOrdersAfterResponse(rsp)
}

func (c *ClientWithResponses) CancelAllOrdersAfterWithFormdataBodyWithResponse(ctx context.Context, body CancelAllOrdersAfterFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelAllOrdersAfterResponse, error) {
	rsp, err := c.CancelAllOrdersAfterWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAllOrdersAfterResponse(rsp)
}

// CancelOrderWithBodyWithResponse request with arbitrary body returning *CancelOrderResponse
func (c *ClientWithResponses) CancelOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error) {
	rsp, err := c.CancelOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelOrderResponse(rsp)
}

func (c *ClientWithResponses) CancelOrderWithFormdataBodyWithResponse(ctx context.Context, body CancelOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error) {
	rsp, err := c.CancelOrderWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelOrderResponse(rsp)
}

// CancelOrderBatchWithBodyWithResponse request with arbitrary body returning *CancelOrderBatchResponse
func (c *ClientWithResponses) CancelOrderBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelOrderBatchResponse, error) {
	rsp, err := c.CancelOrderBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelOrderBatchResponse(rsp)
}

func (c *ClientWithResponses) CancelOrderBatchWithFormdataBodyWithResponse(ctx context.Context, body CancelOrderBatchFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelOrderBatchResponse, error) {
	rsp, err := c.CancelOrderBatchWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelOrderBatchResponse(rsp)
}

// GetClosedOrdersWithBodyWithResponse request with arbitrary body returning *GetClosedOrdersResponse
func (c *ClientWithResponses) GetClosedOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetClosedOrdersResponse, error) {
	rsp, err := c.GetClosedOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClosedOrdersResponse(rsp)
}

func (c *ClientWithResponses) GetClosedOrdersWithFormdataBodyWithResponse(ctx context.Context, body GetClosedOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetClosedOrdersResponse, error) {
	rsp, err := c.GetClosedOrdersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClosedOrdersResponse(rsp)
}

// GetDepositAddressesWithBodyWithResponse request with arbitrary body returning *GetDepositAddressesResponse
func (c *ClientWithResponses) GetDepositAddressesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDepositAddressesResponse, error) {
	rsp, err := c.GetDepositAddressesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepositAddressesResponse(rsp)
}

func (c *ClientWithResponses) GetDepositAddressesWithFormdataBodyWithResponse(ctx context.Context, body GetDepositAddressesFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetDepositAddressesResponse, error) {
	rsp, err := c.GetDepositAddressesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepositAddressesResponse(rsp)
}

// GetDepositMethodsWithBodyWithResponse request with arbitrary body returning *GetDepositMethodsResponse
func (c *ClientWithResponses) GetDepositMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDepositMethodsResponse, error) {
	rsp, err := c.GetDepositMethodsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepositMethodsResponse(rsp)
}

func (c *ClientWithResponses) GetDepositMethodsWithFormdataBodyWithResponse(ctx context.Context, body GetDepositMethodsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetDepositMethodsResponse, error) {
	rsp, err := c.GetDepositMethodsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepositMethodsResponse(rsp)
}

// GetStatusRecentDepositsWithBodyWithResponse request with arbitrary body returning *GetStatusRecentDepositsResponse
func (c *ClientWithResponses) GetStatusRecentDepositsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatusRecentDepositsResponse, error) {
	rsp, err := c.GetStatusRecentDepositsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusRecentDepositsResponse(rsp)
}

func (c *ClientWithResponses) GetStatusRecentDepositsWithFormdataBodyWithResponse(ctx context.Context, body GetStatusRecentDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStatusRecentDepositsResponse, error) {
	rsp, err := c.GetStatusRecentDepositsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusRecentDepositsResponse(rsp)
}

// EditOrderWithBodyWithResponse request with arbitrary body returning *EditOrderResponse
func (c *ClientWithResponses) EditOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditOrderResponse, error) {
	rsp, err := c.EditOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditOrderResponse(rsp)
}

func (c *ClientWithResponses) EditOrderWithFormdataBodyWithResponse(ctx context.Context, body EditOrderFormdataRequestBody, reqEditors ...RequestEditorFn) (*EditOrderResponse, error) {
	rsp, err := c.EditOrderWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditOrderResponse(rsp)
}

// ExportStatusWithBodyWithResponse request with arbitrary body returning *ExportStatusResponse
func (c *ClientWithResponses) ExportStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportStatusResponse, error) {
	rsp, err := c.ExportStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportStatusResponse(rsp)
}

func (c *ClientWithResponses) ExportStatusWithFormdataBodyWithResponse(ctx context.Context, body ExportStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*ExportStatusResponse, error) {
	rsp, err := c.ExportStatusWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportStatusResponse(rsp)
}

// GetWebsocketsTokenWithBodyWithResponse request with arbitrary body returning *GetWebsocketsTokenResponse
func (c *ClientWithResponses) GetWebsocketsTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWebsocketsTokenResponse, error) {
	rsp, err := c.GetWebsocketsTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebsocketsTokenResponse(rsp)
}

func (c *ClientWithResponses) GetWebsocketsTokenWithFormdataBodyWithResponse(ctx context.Context, body GetWebsocketsTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetWebsocketsTokenResponse, error) {
	rsp, err := c.GetWebsocketsTokenWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebsocketsTokenResponse(rsp)
}

// GetLedgersWithBodyWithResponse request with arbitrary body returning *GetLedgersResponse
func (c *ClientWithResponses) GetLedgersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLedgersResponse, error) {
	rsp, err := c.GetLedgersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLedgersResponse(rsp)
}

func (c *ClientWithResponses) GetLedgersWithFormdataBodyWithResponse(ctx context.Context, body GetLedgersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetLedgersResponse, error) {
	rsp, err := c.GetLedgersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLedgersResponse(rsp)
}

// GetOpenOrdersWithBodyWithResponse request with arbitrary body returning *GetOpenOrdersResponse
func (c *ClientWithResponses) GetOpenOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOpenOrdersResponse, error) {
	rsp, err := c.GetOpenOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenOrdersResponse(rsp)
}

func (c *ClientWithResponses) GetOpenOrdersWithFormdataBodyWithResponse(ctx context.Context, body GetOpenOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOpenOrdersResponse, error) {
	rsp, err := c.GetOpenOrdersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenOrdersResponse(rsp)
}

// GetOpenPositionsWithBodyWithResponse request with arbitrary body returning *GetOpenPositionsResponse
func (c *ClientWithResponses) GetOpenPositionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOpenPositionsResponse, error) {
	rsp, err := c.GetOpenPositionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenPositionsResponse(rsp)
}

func (c *ClientWithResponses) GetOpenPositionsWithFormdataBodyWithResponse(ctx context.Context, body GetOpenPositionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOpenPositionsResponse, error) {
	rsp, err := c.GetOpenPositionsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenPositionsResponse(rsp)
}

// GetLedgersInfoWithBodyWithResponse request with arbitrary body returning *GetLedgersInfoResponse
func (c *ClientWithResponses) GetLedgersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLedgersInfoResponse, error) {
	rsp, err := c.GetLedgersInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLedgersInfoResponse(rsp)
}

func (c *ClientWithResponses) GetLedgersInfoWithFormdataBodyWithResponse(ctx context.Context, body GetLedgersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetLedgersInfoResponse, error) {
	rsp, err := c.GetLedgersInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLedgersInfoResponse(rsp)
}

// GetOrdersInfoWithBodyWithResponse request with arbitrary body returning *GetOrdersInfoResponse
func (c *ClientWithResponses) GetOrdersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOrdersInfoResponse, error) {
	rsp, err := c.GetOrdersInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersInfoResponse(rsp)
}

func (c *ClientWithResponses) GetOrdersInfoWithFormdataBodyWithResponse(ctx context.Context, body GetOrdersInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetOrdersInfoResponse, error) {
	rsp, err := c.GetOrdersInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersInfoResponse(rsp)
}

// GetTradesInfoWithBodyWithResponse request with arbitrary body returning *GetTradesInfoResponse
func (c *ClientWithResponses) GetTradesInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradesInfoResponse, error) {
	rsp, err := c.GetTradesInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradesInfoResponse(rsp)
}

func (c *ClientWithResponses) GetTradesInfoWithFormdataBodyWithResponse(ctx context.Context, body GetTradesInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradesInfoResponse, error) {
	rsp, err := c.GetTradesInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradesInfoResponse(rsp)
}

// RemoveExportWithBodyWithResponse request with arbitrary body returning *RemoveExportResponse
func (c *ClientWithResponses) RemoveExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveExportResponse, error) {
	rsp, err := c.RemoveExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveExportResponse(rsp)
}

func (c *ClientWithResponses) RemoveExportWithFormdataBodyWithResponse(ctx context.Context, body RemoveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*RemoveExportResponse, error) {
	rsp, err := c.RemoveExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveExportResponse(rsp)
}

// RetrieveExportWithBodyWithResponse request with arbitrary body returning *RetrieveExportResponse
func (c *ClientWithResponses) RetrieveExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveExportResponse, error) {
	rsp, err := c.RetrieveExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveExportResponse(rsp)
}

func (c *ClientWithResponses) RetrieveExportWithFormdataBodyWithResponse(ctx context.Context, body RetrieveExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*RetrieveExportResponse, error) {
	rsp, err := c.RetrieveExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveExportResponse(rsp)
}

// StakeWithBodyWithResponse request with arbitrary body returning *StakeResponse
func (c *ClientWithResponses) StakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StakeResponse, error) {
	rsp, err := c.StakeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStakeResponse(rsp)
}

func (c *ClientWithResponses) StakeWithFormdataBodyWithResponse(ctx context.Context, body StakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*StakeResponse, error) {
	rsp, err := c.StakeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStakeResponse(rsp)
}

// GetStakingAssetInfoWithBodyWithResponse request with arbitrary body returning *GetStakingAssetInfoResponse
func (c *ClientWithResponses) GetStakingAssetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingAssetInfoResponse, error) {
	rsp, err := c.GetStakingAssetInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingAssetInfoResponse(rsp)
}

func (c *ClientWithResponses) GetStakingAssetInfoWithFormdataBodyWithResponse(ctx context.Context, body GetStakingAssetInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingAssetInfoResponse, error) {
	rsp, err := c.GetStakingAssetInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingAssetInfoResponse(rsp)
}

// GetStakingPendingDepositsWithBodyWithResponse request with arbitrary body returning *GetStakingPendingDepositsResponse
func (c *ClientWithResponses) GetStakingPendingDepositsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingPendingDepositsResponse, error) {
	rsp, err := c.GetStakingPendingDepositsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingPendingDepositsResponse(rsp)
}

func (c *ClientWithResponses) GetStakingPendingDepositsWithFormdataBodyWithResponse(ctx context.Context, body GetStakingPendingDepositsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingPendingDepositsResponse, error) {
	rsp, err := c.GetStakingPendingDepositsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingPendingDepositsResponse(rsp)
}

// GetStakingTransactionsWithBodyWithResponse request with arbitrary body returning *GetStakingTransactionsResponse
func (c *ClientWithResponses) GetStakingTransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStakingTransactionsResponse, error) {
	rsp, err := c.GetStakingTransactionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingTransactionsResponse(rsp)
}

func (c *ClientWithResponses) GetStakingTransactionsWithFormdataBodyWithResponse(ctx context.Context, body GetStakingTransactionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStakingTransactionsResponse, error) {
	rsp, err := c.GetStakingTransactionsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStakingTransactionsResponse(rsp)
}

// GetTradeBalanceWithBodyWithResponse request with arbitrary body returning *GetTradeBalanceResponse
func (c *ClientWithResponses) GetTradeBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeBalanceResponse, error) {
	rsp, err := c.GetTradeBalanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeBalanceResponse(rsp)
}

func (c *ClientWithResponses) GetTradeBalanceWithFormdataBodyWithResponse(ctx context.Context, body GetTradeBalanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeBalanceResponse, error) {
	rsp, err := c.GetTradeBalanceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeBalanceResponse(rsp)
}

// GetTradeVolumeWithBodyWithResponse request with arbitrary body returning *GetTradeVolumeResponse
func (c *ClientWithResponses) GetTradeVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeVolumeResponse, error) {
	rsp, err := c.GetTradeVolumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeVolumeResponse(rsp)
}

func (c *ClientWithResponses) GetTradeVolumeWithFormdataBodyWithResponse(ctx context.Context, body GetTradeVolumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeVolumeResponse, error) {
	rsp, err := c.GetTradeVolumeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeVolumeResponse(rsp)
}

// GetTradeHistoryWithBodyWithResponse request with arbitrary body returning *GetTradeHistoryResponse
func (c *ClientWithResponses) GetTradeHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTradeHistoryResponse, error) {
	rsp, err := c.GetTradeHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeHistoryResponse(rsp)
}

func (c *ClientWithResponses) GetTradeHistoryWithFormdataBodyWithResponse(ctx context.Context, body GetTradeHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetTradeHistoryResponse, error) {
	rsp, err := c.GetTradeHistoryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradeHistoryResponse(rsp)
}

// UnstakeWithBodyWithResponse request with arbitrary body returning *UnstakeResponse
func (c *ClientWithResponses) UnstakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnstakeResponse, error) {
	rsp, err := c.UnstakeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnstakeResponse(rsp)
}

func (c *ClientWithResponses) UnstakeWithFormdataBodyWithResponse(ctx context.Context, body UnstakeFormdataRequestBody, reqEditors ...RequestEditorFn) (*UnstakeResponse, error) {
	rsp, err := c.UnstakeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnstakeResponse(rsp)
}

// WalletTransferWithBodyWithResponse request with arbitrary body returning *WalletTransferResponse
func (c *ClientWithResponses) WalletTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WalletTransferResponse, error) {
	rsp, err := c.WalletTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWalletTransferResponse(rsp)
}

func (c *ClientWithResponses) WalletTransferWithFormdataBodyWithResponse(ctx context.Context, body WalletTransferFormdataRequestBody, reqEditors ...RequestEditorFn) (*WalletTransferResponse, error) {
	rsp, err := c.WalletTransferWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWalletTransferResponse(rsp)
}

// WithdrawFundsWithBodyWithResponse request with arbitrary body returning *WithdrawFundsResponse
func (c *ClientWithResponses) WithdrawFundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WithdrawFundsResponse, error) {
	rsp, err := c.WithdrawFundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWithdrawFundsResponse(rsp)
}

func (c *ClientWithResponses) WithdrawFundsWithFormdataBodyWithResponse(ctx context.Context, body WithdrawFundsFormdataRequestBody, reqEditors ...RequestEditorFn) (*WithdrawFundsResponse, error) {
	rsp, err := c.WithdrawFundsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWithdrawFundsResponse(rsp)
}

// CancelWithdrawalWithBodyWithResponse request with arbitrary body returning *CancelWithdrawalResponse
func (c *ClientWithResponses) CancelWithdrawalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error) {
	rsp, err := c.CancelWithdrawalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelWithdrawalResponse(rsp)
}

func (c *ClientWithResponses) CancelWithdrawalWithFormdataBodyWithResponse(ctx context.Context, body CancelWithdrawalFormdataRequestBody, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error) {
	rsp, err := c.CancelWithdrawalWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelWithdrawalResponse(rsp)
}

// GetWithdrawalInformationWithBodyWithResponse request with arbitrary body returning *GetWithdrawalInformationResponse
func (c *ClientWithResponses) GetWithdrawalInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWithdrawalInformationResponse, error) {
	rsp, err := c.GetWithdrawalInformationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithdrawalInformationResponse(rsp)
}

func (c *ClientWithResponses) GetWithdrawalInformationWithFormdataBodyWithResponse(ctx context.Context, body GetWithdrawalInformationFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetWithdrawalInformationResponse, error) {
	rsp, err := c.GetWithdrawalInformationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithdrawalInformationResponse(rsp)
}

// GetStatusRecentWithdrawalsWithBodyWithResponse request with arbitrary body returning *GetStatusRecentWithdrawalsResponse
func (c *ClientWithResponses) GetStatusRecentWithdrawalsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatusRecentWithdrawalsResponse, error) {
	rsp, err := c.GetStatusRecentWithdrawalsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusRecentWithdrawalsResponse(rsp)
}

func (c *ClientWithResponses) GetStatusRecentWithdrawalsWithFormdataBodyWithResponse(ctx context.Context, body GetStatusRecentWithdrawalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetStatusRecentWithdrawalsResponse, error) {
	rsp, err := c.GetStatusRecentWithdrawalsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusRecentWithdrawalsResponse(rsp)
}

// GetTradableAssetPairsWithResponse request returning *GetTradableAssetPairsResponse
func (c *ClientWithResponses) GetTradableAssetPairsWithResponse(ctx context.Context, params *GetTradableAssetPairsParams, reqEditors ...RequestEditorFn) (*GetTradableAssetPairsResponse, error) {
	rsp, err := c.GetTradableAssetPairs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTradableAssetPairsResponse(rsp)
}

// GetAssetInfoWithResponse request returning *GetAssetInfoResponse
func (c *ClientWithResponses) GetAssetInfoWithResponse(ctx context.Context, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error) {
	rsp, err := c.GetAssetInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetInfoResponse(rsp)
}

// GetOrderBookWithResponse request returning *GetOrderBookResponse
func (c *ClientWithResponses) GetOrderBookWithResponse(ctx context.Context, params *GetOrderBookParams, reqEditors ...RequestEditorFn) (*GetOrderBookResponse, error) {
	rsp, err := c.GetOrderBook(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderBookResponse(rsp)
}

// GetOHLCDataWithResponse request returning *GetOHLCDataResponse
func (c *ClientWithResponses) GetOHLCDataWithResponse(ctx context.Context, params *GetOHLCDataParams, reqEditors ...RequestEditorFn) (*GetOHLCDataResponse, error) {
	rsp, err := c.GetOHLCData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOHLCDataResponse(rsp)
}

// GetRecentSpreadsWithResponse request returning *GetRecentSpreadsResponse
func (c *ClientWithResponses) GetRecentSpreadsWithResponse(ctx context.Context, params *GetRecentSpreadsParams, reqEditors ...RequestEditorFn) (*GetRecentSpreadsResponse, error) {
	rsp, err := c.GetRecentSpreads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecentSpreadsResponse(rsp)
}

// GetSystemStatusWithResponse request returning *GetSystemStatusResponse
func (c *ClientWithResponses) GetSystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStatusResponse, error) {
	rsp, err := c.GetSystemStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemStatusResponse(rsp)
}

// GetTickerInformationWithResponse request returning *GetTickerInformationResponse
func (c *ClientWithResponses) GetTickerInformationWithResponse(ctx context.Context, params *GetTickerInformationParams, reqEditors ...RequestEditorFn) (*GetTickerInformationResponse, error) {
	rsp, err := c.GetTickerInformation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTickerInformationResponse(rsp)
}

// GetServerTimeWithResponse request returning *GetServerTimeResponse
func (c *ClientWithResponses) GetServerTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerTimeResponse, error) {
	rsp, err := c.GetServerTime(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerTimeResponse(rsp)
}

// GetRecentTradesWithResponse request returning *GetRecentTradesResponse
func (c *ClientWithResponses) GetRecentTradesWithResponse(ctx context.Context, params *GetRecentTradesParams, reqEditors ...RequestEditorFn) (*GetRecentTradesResponse, error) {
	rsp, err := c.GetRecentTrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecentTradesResponse(rsp)
}

// ParseAddExportResponse parses an HTTP response from a AddExportWithResponse call
func ParseAddExportResponse(rsp *http.Response) (*AddExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Id Report ID
				Id *string `json:"id,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrderResponse parses an HTTP response from a AddOrderWithResponse call
func ParseAddOrderResponse(rsp *http.Response) (*AddOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Add2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			fmt.Println("body : " + string(bodyBytes))
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrderBatchResponse parses an HTTP response from a AddOrderBatchWithResponse call
func ParseAddOrderBatchResponse(rsp *http.Response) (*AddOrderBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrderBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Batchadd2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountBalanceResponse parses an HTTP response from a GetAccountBalanceWithResponse call
func ParseGetAccountBalanceResponse(rsp *http.Response) (*GetAccountBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Balance2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelAllOrdersResponse parses an HTTP response from a CancelAllOrdersWithResponse call
func ParseCancelAllOrdersResponse(rsp *http.Response) (*CancelAllOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAllOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Count Number of orders that were cancelled
				Count *int `json:"count,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelAllOrdersAfterResponse parses an HTTP response from a CancelAllOrdersAfterWithResponse call
func ParseCancelAllOrdersAfterResponse(rsp *http.Response) (*CancelAllOrdersAfterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAllOrdersAfterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// CurrentTime Timestamp (RFC3339 format) at which the request was received
				CurrentTime *string `json:"currentTime,omitempty"`

				// TriggerTime Timestamp (RFC3339 format) after which all orders will be cancelled, unless the timer is extended or disabled
				TriggerTime *string `json:"triggerTime,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelOrderResponse parses an HTTP response from a CancelOrderWithResponse call
func ParseCancelOrderResponse(rsp *http.Response) (*CancelOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cancel2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelOrderBatchResponse parses an HTTP response from a CancelOrderBatchWithResponse call
func ParseCancelOrderBatchResponse(rsp *http.Response) (*CancelOrderBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelOrderBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Batchcancel2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClosedOrdersResponse parses an HTTP response from a GetClosedOrdersWithResponse call
func ParseGetClosedOrdersResponse(rsp *http.Response) (*GetClosedOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClosedOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Closed2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDepositAddressesResponse parses an HTTP response from a GetDepositAddressesWithResponse call
func ParseGetDepositAddressesResponse(rsp *http.Response) (*GetDepositAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDepositAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Addresses2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDepositMethodsResponse parses an HTTP response from a GetDepositMethodsWithResponse call
func ParseGetDepositMethodsResponse(rsp *http.Response) (*GetDepositMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDepositMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Methods2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusRecentDepositsResponse parses an HTTP response from a GetStatusRecentDepositsWithResponse call
func ParseGetStatusRecentDepositsResponse(rsp *http.Response) (*GetStatusRecentDepositsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusRecentDepositsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recent2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditOrderResponse parses an HTTP response from a EditOrderWithResponse call
func ParseEditOrderResponse(rsp *http.Response) (*EditOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Edit2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportStatusResponse parses an HTTP response from a ExportStatusWithResponse call
func ParseExportStatusResponse(rsp *http.Response) (*ExportStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *[]struct {
				Aclass *string `json:"aclass,omitempty"`
				Asset  *string `json:"asset,omitempty"`

				// Completedtm UNIX timestamp report processing finished
				Completedtm *string `json:"completedtm,omitempty"`

				// Createdtm UNIX timestamp of report request
				Createdtm *string `json:"createdtm,omitempty"`

				// Dataendtm UNIX timestamp of the report data end time
				Dataendtm *string `json:"dataendtm,omitempty"`

				// Datastarttm UNIX timestamp of the report data start time
				Datastarttm *string `json:"datastarttm,omitempty"`
				Descr       *string `json:"descr,omitempty"`
				Expiretm    *string `json:"expiretm,omitempty"`
				Fields      *string `json:"fields,omitempty"`
				Flags       *string `json:"flags,omitempty"`
				Format      *string `json:"format,omitempty"`

				// Id Report ID
				Id     *string `json:"id,omitempty"`
				Report *string `json:"report,omitempty"`

				// Starttm UNIX timestamp report processing began
				Starttm *string `json:"starttm,omitempty"`

				// Status Status of the report
				Status  *GetSystemStatusResponseStatus `json:"status,omitempty"`
				Subtype *string           `json:"subtype,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWebsocketsTokenResponse parses an HTTP response from a GetWebsocketsTokenWithResponse call
func ParseGetWebsocketsTokenResponse(rsp *http.Response) (*GetWebsocketsTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebsocketsTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Expires Time (in seconds) after which the token expires
				Expires *int `json:"expires,omitempty"`

				// Token Websockets token
				Token *string `json:"token,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLedgersResponse parses an HTTP response from a GetLedgersWithResponse call
func ParseGetLedgersResponse(rsp *http.Response) (*GetLedgersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLedgersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Info3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenOrdersResponse parses an HTTP response from a GetOpenOrdersWithResponse call
func ParseGetOpenOrdersResponse(rsp *http.Response) (*GetOpenOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Open2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenPositionsResponse parses an HTTP response from a GetOpenPositionsWithResponse call
func ParseGetOpenPositionsResponse(rsp *http.Response) (*GetOpenPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *map[string]struct {
				// Cost Opening cost of position (in quote currency)
				Cost *string `json:"cost,omitempty"`

				// Fee Opening fee of position (in quote currency)
				Fee *string `json:"fee,omitempty"`

				// Margin Initial margin consumed (in quote currency)
				Margin *string `json:"margin,omitempty"`

				// Misc Comma delimited list of add'l info
				Misc *string `json:"misc,omitempty"`

				// Net Unrealised P&L of remaining position (if `docalcs` requested)
				Net *string `json:"net,omitempty"`

				// Oflags Comma delimited list of opening order flags
				Oflags *string `json:"oflags,omitempty"`

				// Ordertxid Order ID responsible for the position
				Ordertxid *string `json:"ordertxid,omitempty"`

				// Ordertype Order type used to open position
				Ordertype *string `json:"ordertype,omitempty"`

				// Pair Asset pair
				Pair *string `json:"pair,omitempty"`

				// Posstatus Position status
				Posstatus *string `json:"posstatus,omitempty"`

				// Rollovertm Timestamp of next margin rollover fee
				Rollovertm *string `json:"rollovertm,omitempty"`

				// Terms Funding cost and term of position
				Terms *string `json:"terms,omitempty"`

				// Time Unix timestamp of trade
				Time *float32 `json:"time,omitempty"`

				// Type Direction (buy/sell) of position
				Type *string `json:"type,omitempty"`

				// Value Current value of remaining position (if `docalcs` requested)
				Value *string `json:"value,omitempty"`

				// Vol Position opening size (in base currency)
				Vol *string `json:"vol,omitempty"`

				// VolClosed Quantity closed (in base currency)
				VolClosed *string `json:"vol_closed,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLedgersInfoResponse parses an HTTP response from a GetLedgersInfoWithResponse call
func ParseGetLedgersInfoResponse(rsp *http.Response) (*GetLedgersInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLedgersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Query3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrdersInfoResponse parses an HTTP response from a GetOrdersInfoWithResponse call
func ParseGetOrdersInfoResponse(rsp *http.Response) (*GetOrdersInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Query2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTradesInfoResponse parses an HTTP response from a GetTradesInfoWithResponse call
func ParseGetTradesInfoResponse(rsp *http.Response) (*GetTradesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTradesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *[]Error `json:"error,omitempty"`

			// Result Trade info
			Result *map[string]Trade2 `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveExportResponse parses an HTTP response from a RemoveExportWithResponse call
func ParseRemoveExportResponse(rsp *http.Response) (*RemoveExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Cancel Whether cancellation was successful
				Cancel *bool `json:"cancel,omitempty"`

				// Delete Whether deletion was successful
				Delete *bool `json:"delete,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveExportResponse parses an HTTP response from a RetrieveExportWithResponse call
func ParseRetrieveExportResponse(rsp *http.Response) (*RetrieveExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStakeResponse parses an HTTP response from a StakeWithResponse call
func ParseStakeResponse(rsp *http.Response) (*StakeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StakeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Refid Reference ID
				Refid *string `json:"refid,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStakingAssetInfoResponse parses an HTTP response from a GetStakingAssetInfoWithResponse call
func ParseGetStakingAssetInfoResponse(rsp *http.Response) (*GetStakingAssetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStakingAssetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error       `json:"error,omitempty"`
			Result *[]testAsset `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStakingPendingDepositsResponse parses an HTTP response from a GetStakingPendingDepositsWithResponse call
func ParseGetStakingPendingDepositsResponse(rsp *http.Response) (*GetStakingPendingDepositsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStakingPendingDepositsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error         `json:"error,omitempty"`
			Result *[]Transaction `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStakingTransactionsResponse parses an HTTP response from a GetStakingTransactionsWithResponse call
func ParseGetStakingTransactionsResponse(rsp *http.Response) (*GetStakingTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStakingTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error         `json:"error,omitempty"`
			Result *[]Transaction `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTradeBalanceResponse parses an HTTP response from a GetTradeBalanceWithResponse call
func ParseGetTradeBalanceResponse(rsp *http.Response) (*GetTradeBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTradeBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Balance4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTradeVolumeResponse parses an HTTP response from a GetTradeVolumeWithResponse call
func ParseGetTradeVolumeResponse(rsp *http.Response) (*GetTradeVolumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTradeVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTradeHistoryResponse parses an HTTP response from a GetTradeHistoryWithResponse call
func ParseGetTradeHistoryResponse(rsp *http.Response) (*GetTradeHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTradeHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest History2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnstakeResponse parses an HTTP response from a UnstakeWithResponse call
func ParseUnstakeResponse(rsp *http.Response) (*UnstakeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnstakeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Refid Reference ID
				Refid *string `json:"refid,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWalletTransferResponse parses an HTTP response from a WalletTransferWithResponse call
func ParseWalletTransferResponse(rsp *http.Response) (*WalletTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WalletTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Refid Reference ID
				Refid *string `json:"refid,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWithdrawFundsResponse parses an HTTP response from a WithdrawFundsWithResponse call
func ParseWithdrawFundsResponse(rsp *http.Response) (*WithdrawFundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WithdrawFundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Withdrawal2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelWithdrawalResponse parses an HTTP response from a CancelWithdrawalWithResponse call
func ParseCancelWithdrawalResponse(rsp *http.Response) (*CancelWithdrawalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *Error `json:"error,omitempty"`

			// Result Whether cancellation was successful or not.
			Result *bool `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWithdrawalInformationResponse parses an HTTP response from a GetWithdrawalInformationWithResponse call
func ParseGetWithdrawalInformationResponse(rsp *http.Response) (*GetWithdrawalInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithdrawalInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Info5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusRecentWithdrawalsResponse parses an HTTP response from a GetStatusRecentWithdrawalsWithResponse call
func ParseGetStatusRecentWithdrawalsResponse(rsp *http.Response) (*GetStatusRecentWithdrawalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusRecentWithdrawalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recent4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTradableAssetPairsResponse parses an HTTP response from a GetTradableAssetPairsWithResponse call
func ParseGetTradableAssetPairsResponse(rsp *http.Response) (*GetTradableAssetPairsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTradableAssetPairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *Error `json:"error,omitempty"`

			// Result Pair names and their info
			Result *map[string]Pairs `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssetInfoResponse parses an HTTP response from a GetAssetInfoWithResponse call
func ParseGetAssetInfoResponse(rsp *http.Response) (*GetAssetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Info2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderBookResponse parses an HTTP response from a GetOrderBookWithResponse call
func ParseGetOrderBookResponse(rsp *http.Response) (*GetOrderBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Depth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOHLCDataResponse parses an HTTP response from a GetOHLCDataWithResponse call
func ParseGetOHLCDataResponse(rsp *http.Response) (*GetOHLCDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOHLCDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ohlc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecentSpreadsResponse parses an HTTP response from a GetRecentSpreadsWithResponse call
func ParseGetRecentSpreadsResponse(rsp *http.Response) (*GetRecentSpreadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecentSpreadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Spread2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemStatusResponse parses an HTTP response from a GetSystemStatusWithResponse call
func ParseGetSystemStatusResponse(rsp *http.Response) (*GetSystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error  *Error `json:"error,omitempty"`
			Result *struct {
				// Status Current system status:
				// * `online`  Kraken is operating normally. All order types may be submitted and trades can occur.
				// * `maintenance`  The exchange is offline. No new orders or cancellations may be submitted.
				// * `cancel_only`  Resting (open) orders can be cancelled but no new orders may be submitted. No trades will occur.
				// * `post_only`  Only post-only limit orders can be submitted. Existing orders may still be cancelled. No trades will occur.
				Status *GetSystemStatusResponseStatus `json:"status,omitempty"`

				// Timestamp Current timestamp (RFC3339)
				Timestamp *string `json:"timestamp,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTickerInformationResponse parses an HTTP response from a GetTickerInformationWithResponse call
func ParseGetTickerInformationResponse(rsp *http.Response) (*GetTickerInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTickerInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ticker2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerTimeResponse parses an HTTP response from a GetServerTimeWithResponse call
func ParseGetServerTimeResponse(rsp *http.Response) (*GetServerTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecentTradesResponse parses an HTTP response from a GetRecentTradesWithResponse call
func ParseGetRecentTradesResponse(rsp *http.Response) (*GetRecentTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecentTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request Export Report
	// (POST /private/AddExport)
	AddExport(ctx echo.Context) error
	// Add Order
	// (POST /private/AddOrder)
	AddOrder(ctx echo.Context) error
	// Add Order Batch
	// (POST /private/AddOrderBatch)
	AddOrderBatch(ctx echo.Context) error
	// Get Account Balance
	// (POST /private/Balance)
	GetAccountBalance(ctx echo.Context) error
	// Cancel All Orders
	// (POST /private/CancelAll)
	CancelAllOrders(ctx echo.Context) error
	// Cancel All Orders After X
	// (POST /private/CancelAllOrdersAfter)
	CancelAllOrdersAfter(ctx echo.Context) error
	// Cancel Order
	// (POST /private/CancelOrder)
	CancelOrder(ctx echo.Context) error
	// Cancel Order Batch
	// (POST /private/CancelOrderBatch)
	CancelOrderBatch(ctx echo.Context) error
	// Get Closed Orders
	// (POST /private/ClosedOrders)
	GetClosedOrders(ctx echo.Context) error
	// Get Deposit Addresses
	// (POST /private/DepositAddresses)
	GetDepositAddresses(ctx echo.Context) error
	// Get Deposit Methods
	// (POST /private/DepositMethods)
	GetDepositMethods(ctx echo.Context) error
	// Get Status of Recent Deposits
	// (POST /private/DepositStatus)
	GetStatusRecentDeposits(ctx echo.Context) error
	// Edit Order
	// (POST /private/EditOrder)
	EditOrder(ctx echo.Context) error
	// Get Export Report Status
	// (POST /private/ExportStatus)
	ExportStatus(ctx echo.Context) error
	// Get Websockets Token
	// (POST /private/GetWebSocketsToken)
	GetWebsocketsToken(ctx echo.Context) error
	// Get Ledgers Info
	// (POST /private/Ledgers)
	GetLedgers(ctx echo.Context) error
	// Get Open Orders
	// (POST /private/OpenOrders)
	GetOpenOrders(ctx echo.Context) error
	// Get Open Positions
	// (POST /private/OpenPositions)
	GetOpenPositions(ctx echo.Context) error
	// Query Ledgers
	// (POST /private/QueryLedgers)
	GetLedgersInfo(ctx echo.Context) error
	// Query Orders Info
	// (POST /private/QueryOrders)
	GetOrdersInfo(ctx echo.Context) error
	// Query Trades Info
	// (POST /private/QueryTrades)
	GetTradesInfo(ctx echo.Context) error
	// Delete Export Report
	// (POST /private/RemoveExport)
	RemoveExport(ctx echo.Context) error
	// Retrieve Data Export
	// (POST /private/RetrieveExport)
	RetrieveExport(ctx echo.Context) error
	// Stake Asset
	// (POST /private/Stake)
	Stake(ctx echo.Context) error
	// List of Stakeable Assets
	// (POST /private/Staking/Assets)
	GetStakingAssetInfo(ctx echo.Context) error
	// Get Pending Staking Transactions
	// (POST /private/Staking/Pending)
	GetStakingPendingDeposits(ctx echo.Context) error
	// List of Staking Transactions
	// (POST /private/Staking/Transactions)
	GetStakingTransactions(ctx echo.Context) error
	// Get Trade Balance
	// (POST /private/TradeBalance)
	GetTradeBalance(ctx echo.Context) error
	// Get Trade Volume
	// (POST /private/TradeVolume)
	GetTradeVolume(ctx echo.Context) error
	// Get Trades History
	// (POST /private/TradesHistory)
	GetTradeHistory(ctx echo.Context) error
	// Unstake Asset
	// (POST /private/Unstake)
	Unstake(ctx echo.Context) error
	// Request Wallet Transfer
	// (POST /private/WalletTransfer)
	WalletTransfer(ctx echo.Context) error
	// Withdraw Funds
	// (POST /private/Withdraw)
	WithdrawFunds(ctx echo.Context) error
	// Request Withdrawal Cancelation
	// (POST /private/WithdrawCancel)
	CancelWithdrawal(ctx echo.Context) error
	// Get Withdrawal Information
	// (POST /private/WithdrawInfo)
	GetWithdrawalInformation(ctx echo.Context) error
	// Get Status of Recent Withdrawals
	// (POST /private/WithdrawStatus)
	GetStatusRecentWithdrawals(ctx echo.Context) error
	// Get Tradable Asset Pairs
	// (GET /public/AssetPairs)
	GetTradableAssetPairs(ctx echo.Context, params GetTradableAssetPairsParams) error
	// Get Asset Info
	// (GET /public/Assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Order Book
	// (GET /public/Depth)
	GetOrderBook(ctx echo.Context, params GetOrderBookParams) error
	// Get OHLC Data
	// (GET /public/OHLC)
	GetOHLCData(ctx echo.Context, params GetOHLCDataParams) error
	// Get Recent Spreads
	// (GET /public/Spread)
	GetRecentSpreads(ctx echo.Context, params GetRecentSpreadsParams) error
	// Get System Status
	// (GET /public/SystemStatus)
	GetSystemStatus(ctx echo.Context) error
	// Get Ticker Information
	// (GET /public/Ticker)
	GetTickerInformation(ctx echo.Context, params GetTickerInformationParams) error
	// Get Server Time
	// (GET /public/Time)
	GetServerTime(ctx echo.Context) error
	// Get Recent Trades
	// (GET /public/Trades)
	GetRecentTrades(ctx echo.Context, params GetRecentTradesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddExport converts echo context to params.
func (w *ServerInterfaceWrapper) AddExport(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddExport(ctx)
	return err
}

// AddOrder converts echo context to params.
func (w *ServerInterfaceWrapper) AddOrder(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddOrder(ctx)
	return err
}

// AddOrderBatch converts echo context to params.
func (w *ServerInterfaceWrapper) AddOrderBatch(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddOrderBatch(ctx)
	return err
}

// GetAccountBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountBalance(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountBalance(ctx)
	return err
}

// CancelAllOrders converts echo context to params.
func (w *ServerInterfaceWrapper) CancelAllOrders(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelAllOrders(ctx)
	return err
}

// CancelAllOrdersAfter converts echo context to params.
func (w *ServerInterfaceWrapper) CancelAllOrdersAfter(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelAllOrdersAfter(ctx)
	return err
}

// CancelOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CancelOrder(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelOrder(ctx)
	return err
}

// CancelOrderBatch converts echo context to params.
func (w *ServerInterfaceWrapper) CancelOrderBatch(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelOrderBatch(ctx)
	return err
}

// GetClosedOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetClosedOrders(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClosedOrders(ctx)
	return err
}

// GetDepositAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetDepositAddresses(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDepositAddresses(ctx)
	return err
}

// GetDepositMethods converts echo context to params.
func (w *ServerInterfaceWrapper) GetDepositMethods(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDepositMethods(ctx)
	return err
}

// GetStatusRecentDeposits converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusRecentDeposits(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusRecentDeposits(ctx)
	return err
}

// EditOrder converts echo context to params.
func (w *ServerInterfaceWrapper) EditOrder(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EditOrder(ctx)
	return err
}

// ExportStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ExportStatus(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExportStatus(ctx)
	return err
}

// GetWebsocketsToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebsocketsToken(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWebsocketsToken(ctx)
	return err
}

// GetLedgers converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgers(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgers(ctx)
	return err
}

// GetOpenOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenOrders(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenOrders(ctx)
	return err
}

// GetOpenPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenPositions(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenPositions(ctx)
	return err
}

// GetLedgersInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgersInfo(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgersInfo(ctx)
	return err
}

// GetOrdersInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrdersInfo(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrdersInfo(ctx)
	return err
}

// GetTradesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTradesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTradesInfo(ctx)
	return err
}

// RemoveExport converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveExport(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveExport(ctx)
	return err
}

// RetrieveExport converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveExport(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveExport(ctx)
	return err
}

// Stake converts echo context to params.
func (w *ServerInterfaceWrapper) Stake(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Stake(ctx)
	return err
}

// GetStakingAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakingAssetInfo(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakingAssetInfo(ctx)
	return err
}

// GetStakingPendingDeposits converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakingPendingDeposits(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakingPendingDeposits(ctx)
	return err
}

// GetStakingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakingTransactions(ctx)
	return err
}

// GetTradeBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetTradeBalance(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTradeBalance(ctx)
	return err
}

// GetTradeVolume converts echo context to params.
func (w *ServerInterfaceWrapper) GetTradeVolume(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTradeVolume(ctx)
	return err
}

// GetTradeHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetTradeHistory(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTradeHistory(ctx)
	return err
}

// Unstake converts echo context to params.
func (w *ServerInterfaceWrapper) Unstake(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Unstake(ctx)
	return err
}

// WalletTransfer converts echo context to params.
func (w *ServerInterfaceWrapper) WalletTransfer(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WalletTransfer(ctx)
	return err
}

// WithdrawFunds converts echo context to params.
func (w *ServerInterfaceWrapper) WithdrawFunds(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WithdrawFunds(ctx)
	return err
}

// CancelWithdrawal converts echo context to params.
func (w *ServerInterfaceWrapper) CancelWithdrawal(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelWithdrawal(ctx)
	return err
}

// GetWithdrawalInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetWithdrawalInformation(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWithdrawalInformation(ctx)
	return err
}

// GetStatusRecentWithdrawals converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusRecentWithdrawals(ctx echo.Context) error {
	var err error

	ctx.Set(API_KeyScopes, []string{""})

	ctx.Set(API_SignScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusRecentWithdrawals(ctx)
	return err
}

// GetTradableAssetPairs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTradableAssetPairs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTradableAssetPairsParams
	// ------------- Optional query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, false, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// ------------- Optional query parameter "info" -------------

	err = runtime.BindQueryParameter("form", true, false, "info", ctx.QueryParams(), &params.Info)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter info: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTradableAssetPairs(ctx, params)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "aclass" -------------

	err = runtime.BindQueryParameter("form", true, false, "aclass", ctx.QueryParams(), &params.Aclass)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aclass: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetOrderBook converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderBook(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrderBookParams
	// ------------- Required query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, true, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrderBook(ctx, params)
	return err
}

// GetOHLCData converts echo context to params.
func (w *ServerInterfaceWrapper) GetOHLCData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOHLCDataParams
	// ------------- Required query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, true, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// ------------- Optional query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, false, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOHLCData(ctx, params)
	return err
}

// GetRecentSpreads converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecentSpreads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentSpreadsParams
	// ------------- Required query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, true, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecentSpreads(ctx, params)
	return err
}

// GetSystemStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemStatus(ctx)
	return err
}

// GetTickerInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickerInformation(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTickerInformationParams
	// ------------- Optional query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, false, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTickerInformation(ctx, params)
	return err
}

// GetServerTime converts echo context to params.
func (w *ServerInterfaceWrapper) GetServerTime(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServerTime(ctx)
	return err
}

// GetRecentTrades converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecentTrades(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentTradesParams
	// ------------- Required query parameter "pair" -------------

	err = runtime.BindQueryParameter("form", true, true, "pair", ctx.QueryParams(), &params.Pair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pair: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecentTrades(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/private/AddExport", wrapper.AddExport)
	router.POST(baseURL+"/private/AddOrder", wrapper.AddOrder)
	router.POST(baseURL+"/private/AddOrderBatch", wrapper.AddOrderBatch)
	router.POST(baseURL+"/private/Balance", wrapper.GetAccountBalance)
	router.POST(baseURL+"/private/CancelAll", wrapper.CancelAllOrders)
	router.POST(baseURL+"/private/CancelAllOrdersAfter", wrapper.CancelAllOrdersAfter)
	router.POST(baseURL+"/private/CancelOrder", wrapper.CancelOrder)
	router.POST(baseURL+"/private/CancelOrderBatch", wrapper.CancelOrderBatch)
	router.POST(baseURL+"/private/ClosedOrders", wrapper.GetClosedOrders)
	router.POST(baseURL+"/private/DepositAddresses", wrapper.GetDepositAddresses)
	router.POST(baseURL+"/private/DepositMethods", wrapper.GetDepositMethods)
	router.POST(baseURL+"/private/DepositStatus", wrapper.GetStatusRecentDeposits)
	router.POST(baseURL+"/private/EditOrder", wrapper.EditOrder)
	router.POST(baseURL+"/private/ExportStatus", wrapper.ExportStatus)
	router.POST(baseURL+"/private/GetWebSocketsToken", wrapper.GetWebsocketsToken)
	router.POST(baseURL+"/private/Ledgers", wrapper.GetLedgers)
	router.POST(baseURL+"/private/OpenOrders", wrapper.GetOpenOrders)
	router.POST(baseURL+"/private/OpenPositions", wrapper.GetOpenPositions)
	router.POST(baseURL+"/private/QueryLedgers", wrapper.GetLedgersInfo)
	router.POST(baseURL+"/private/QueryOrders", wrapper.GetOrdersInfo)
	router.POST(baseURL+"/private/QueryTrades", wrapper.GetTradesInfo)
	router.POST(baseURL+"/private/RemoveExport", wrapper.RemoveExport)
	router.POST(baseURL+"/private/RetrieveExport", wrapper.RetrieveExport)
	router.POST(baseURL+"/private/Stake", wrapper.Stake)
	router.POST(baseURL+"/private/Staking/Assets", wrapper.GetStakingAssetInfo)
	router.POST(baseURL+"/private/Staking/Pending", wrapper.GetStakingPendingDeposits)
	router.POST(baseURL+"/private/Staking/Transactions", wrapper.GetStakingTransactions)
	router.POST(baseURL+"/private/TradeBalance", wrapper.GetTradeBalance)
	router.POST(baseURL+"/private/TradeVolume", wrapper.GetTradeVolume)
	router.POST(baseURL+"/private/TradesHistory", wrapper.GetTradeHistory)
	router.POST(baseURL+"/private/Unstake", wrapper.Unstake)
	router.POST(baseURL+"/private/WalletTransfer", wrapper.WalletTransfer)
	router.POST(baseURL+"/private/Withdraw", wrapper.WithdrawFunds)
	router.POST(baseURL+"/private/WithdrawCancel", wrapper.CancelWithdrawal)
	router.POST(baseURL+"/private/WithdrawInfo", wrapper.GetWithdrawalInformation)
	router.POST(baseURL+"/private/WithdrawStatus", wrapper.GetStatusRecentWithdrawals)
	router.GET(baseURL+"/public/AssetPairs", wrapper.GetTradableAssetPairs)
	router.GET(baseURL+"/public/Assets", wrapper.GetAssetInfo)
	router.GET(baseURL+"/public/Depth", wrapper.GetOrderBook)
	router.GET(baseURL+"/public/OHLC", wrapper.GetOHLCData)
	router.GET(baseURL+"/public/Spread", wrapper.GetRecentSpreads)
	router.GET(baseURL+"/public/SystemStatus", wrapper.GetSystemStatus)
	router.GET(baseURL+"/public/Ticker", wrapper.GetTickerInformation)
	router.GET(baseURL+"/public/Time", wrapper.GetServerTime)
	router.GET(baseURL+"/public/Trades", wrapper.GetRecentTrades)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
